class TapApi {

    constructor() {
        this.tapService = '';
        let jsonStatu = {success: {}, faillure: {}};
        this.disconnectJsonStatu = {success: {}, faillure: {}}
        this.testConnection = false;
        this.testDeconnection = false;
        this.correctService = "";
        this.votableQueryResult = "";
        this.query = ""
        this.handlerAttribut = new HandlerAttributs();
        this.handlerAttribut.api = this;
        this.tapButton = undefined;
        this.adqlContent = [];
        this.testJoinConstraint = false;
        this.connector = {status: "", message: "", service: {}}
        this.jsonContaintJoinTable = {
            Succes: {
                status: "",
                base_table: "",
                joined_tables: []
            },
            Failure: {
                NotConnected: {status: "", message: ""},
                WrongTable: {status: "", message: ""}
            }
        }

        this.tapJoinConstraint = [];
        this.tapWhereConstraint = [];

        /**
         * @param votableQueryResult (Object) The return value of tabService.Query(query)
         * @return jsonStatu (Json Object) Return Json containning the status of adql query
         * */
        let isCorrectJsonStatu = function (votableQueryResult) {
            if (votableQueryResult.statusText == "OK") {
                jsonStatu.success["status"] = "OK";
            } else {
                jsonStatu.faillure["status"] = "failled";
                jsonStatu.faillure["message"] = "Bad Request";
            }
            return jsonStatu;
        }

        /**
         * @param votableQueryResult : (Object) The return value of tabService.Query(query)
         * @return jsonStatu : (String) The statuText of votableQueryResult
         * */
        this.getJsonStatu = function (votableQueryResult) {
            var jsonStatu = isCorrectJsonStatu(votableQueryResult)
            return jsonStatu;
        }

    }


}

/**
 * @param params (Json) with parameters (tapService,schema,table,shortName)
 * @param tapService (String) The URL of the Tap Servie
 * @param schema (String) Schema containing the complex object
 * @param table (String) Root table of the complex object
 * @param shortName (String) The Shortname of database
 * */
TapApi.prototype.connect = function ({tapService, schema, table, shortName}) {
    var formatTableName = schema + "." + table;

    //alert(formatTableName);
    var correctTableNameFormat = formatTableName.quotedTableName().qualifiedName;
    this.query = "SELECT TOP 5 * FROM " + correctTableNameFormat;
    this.tapService = new TapService(tapService, schema, shortName, true)
    this.correctService = new TapServiceConnector(tapService, schema, shortName);
    this.votableQueryResult = this.tapService.Query(this.query);

    if (this.getJsonStatu(this.votableQueryResult).success.status == 'OK') {
        this.testConnection = true;
        this.connector.status = 'OK';
        this.connector.service["tapService"] = tapService;
        this.connector.service["schema"] = schema;
        this.connector.service["table"] = table;
        this.connector.service["shortName"] = shortName;
        this.connector.message = "Active TAP : " + shortName
        //this.adqlContent = "";
        // console.log(JSON.stringify(this.getJsonStatu(this.votableQueryResult),undefined,2))

        //retirer dans l'api
        //var data = this.correctService.loadJson();
        //$("#loadJson").html(JSON.stringify(data,undefined,2));
        //window.location.hash = "#loadJson"

        //var jsonData = correctService.createVoTableResultJson(votableQueryResult,table)
        // $("#votableJson").html(JSON.stringify(jsonData,undefined,2));
        // window.location.hash = "#votableJson"

    } else if (this.getJsonStatu(this.votableQueryResult) != undefined && shortName == "Vizier") {
        this.testConnection = true;
        this.connector.status = 'OK';
        this.connector.service["tapService"] = tapService;
        this.connector.service["schema"] = schema;
        this.connector.service["table"] = table;
        this.connector.service["shortName"] = shortName;
        this.connector.message = "Active TAP : " + shortName
    } else {
        this.testConnection = false

        this.connector.status = 'Failled';
        this.connector.message = "No active TAP connection"
        console.log(JSON.stringify(this.getJsonStatu(this.votableQueryResult).faillure, undefined, 3));


    }
    return this.correctService;
}


TapApi.prototype.disconnect = function () {
    reset();
    //alert("disconnected")
    this.tapService = null;
    this.correctService = null;
    this.votableQueryResult = null;
    this.tapJoinConstraint = [];
    this.tapWhereConstraint = [];
    this.adqlContent = "";
    $("#getJsonAll").text("");

    if (this.correctService == null && this.tapService == null && this.votableQueryResult == null) {
        this.disconnectJsonStatu.success["DisconnectStatus"] = "OK";
        this.testDeconnection = true
        this.testConnection = false

        return this.disconnectJsonStatu.success;
    } else {
        this.disconnectJsonStatu.faillure["faillure"] = "failled";
        this.disconnectJsonStatu.faillure["message"] = "disconnecting failled";
        this.testDeconnection = false;
        this.testDeconnection = true;
        return this.disconnectJsonStatu.faillure;
    }
    //console.log(JSON.stringify(this.disconnectJsonStatu,undefined,2))


}


TapApi.prototype.getConnector = function () {
    if (this.testConnection == true) {
        return this.connector;
    } else {
        alert("No Tap service connected");
    }
}

TapApi.prototype.getObjectMap = function () {
    var objectMap = {
        succes: {status: "", object_map: {}},
        failure: {status: "", message: ""}
    }
    if (this.testConnection == true) {
        objectMap.succes.status = "OK"
        objectMap.succes.object_map = this.correctService.loadJson();
        // return objectMap.succes;
    } else {
        objectMap.failure.status = "Failed"
        objectMap.failure.message = "No active TAP connection";
        //return objectMap.failure
    }

    //console.log(JSON.stringify(objectMap,undefined,3));
    return objectMap;
}
/**
 * @param baseTable (string): Table from which joint table are searched
 * */
TapApi.prototype.getJoinedTables = function (baseTable) {


    if (this.testConnection == true) {
        this.jsonContaintJoinTable.Succes.status = "OK";
        this.jsonContaintJoinTable.Succes.base_table = baseTable;
        this.jsonContaintJoinTable.Succes.joined_tables = this.correctService.getJoinTables(baseTable);
        ;
    } else {
        this.jsonContaintJoinTable.Failure.NotConnected.status = "Failed";
        this.jsonContaintJoinTable.Failure.NotConnected.message = "No active TAP connection";
        this.jsonContaintJoinTable.Failure.WrongTable.status = "Failed";
        this.jsonContaintJoinTable.Failure.WrongTable.message = "table " + baseTable + " is not part of the object map"
    }

    return this.jsonContaintJoinTable;
}


/**
 *
 * @param {*} mainJsonData  the main json create by the method createMainJson of Tapservice
 * @returns return all the field of each join table of the mainJson
 */
TapApi.prototype.getCorrectFieldOfJoinTable = function (mainJsonData) {
    var tableContentQueryField = []
    Object.keys(mainJsonData).forEach(function (key) {
        tableContentQueryField.push(key);
    });
    return tableContentQueryField;
}

/**
 *
 * @param {*} mainJsonData the main json create by the method createMainJson of Tapservice
 * @returns return all join request of each join table of the mainJson
 */
TapApi.prototype.getRootFields = function () {

    let jsonContaintRootFields = {
        succes: {status: "", field_values: []},
        failure: {
            notConnected: {status: "", message: ""},
            otherError: {status: "", message: ""}
        }
    }

    let rootFields = [];
    if (this.testConnection === true) {
        let contentText = this.votableQueryResult.responseText;
        if (this.getConnector().service.tapService === "http://simbad.u-strasbg.fr/simbad/sim-tap/sync" || this.getConnector().service.tapService === "http://dc.zah.uni-heidelberg.de/tap/sync") {
            rootFields = VOTableTools.getField(this.votableQueryResult);
        } else {
            rootFields = VOTableTools.genererField(this.votableQueryResult, contentText);
        }
        jsonContaintRootFields.succes.status = "OK"
        jsonContaintRootFields.succes.field_values = rootFields;
        return jsonContaintRootFields.succes;
    } else {

        jsonContaintRootFields.failure.notConnected.status = "Failed";
        jsonContaintRootFields.failure.notConnected.message = "No active TAP connection"
        jsonContaintRootFields.failure.otherError.status = "failed"
        jsonContaintRootFields.failure.otherError.message = "error_message"

        return jsonContaintRootFields.failure
        // alert('you are not connected');
    }


}

TapApi.prototype.getRootFieldValues = function () {
    let jsonContaintRootFieldValues = {
        succes: {status: "", field_values: []},
        failure: {
            notConnected: {status: "", message: ""},
            otherError: {status: "", message: ""}
        }
    }
    let doubleArrayValue = [];
    let singleArrayValue = [];
    if (this.testConnection == true) {

        let Field = this.getRootFields().field_values;
        let dataTable = VOTableTools.votable2Rows(this.votableQueryResult);
        let tableName = this.getConnector().service["table"];

        let nbCols = Field.length;
        if (dataTable[dataTable.length - 1] == 0) {
            dataTable.splice(dataTable.length - 1, 1);
        }
        for (let rowNb = 0; rowNb < dataTable.length; rowNb += nbCols) {//table  content
            for (let col = 0; col < nbCols; col++) {
                singleArrayValue.push(dataTable[rowNb + col]);
            }
            doubleArrayValue.push(singleArrayValue);
            singleArrayValue = [];
        }
        //console.log(doubleArrayValue);
        jsonContaintRootFieldValues.succes.status = "OK"
        jsonContaintRootFieldValues.succes.field_values = doubleArrayValue;

    } else {

        jsonContaintRootFieldValues.failure.notConnected.status = "Failed";
        jsonContaintRootFieldValues.failure.notConnected.message = "No active TAP connection"
        jsonContaintRootFieldValues.failure.otherError.status = "failed"
        jsonContaintRootFieldValues.failure.otherError.message = "error_message"
        // alert('you are not connected');
    }

    return jsonContaintRootFieldValues;

}

TapApi.prototype.getRootQueryIds = function () {
    let jsonContaintRootQueryIdsValues = {
        succes: {status: "", field_ids: []},
        failure: {
            notConnected: {status: "", message: ""},
            otherError: {status: "", message: ""}
        }
    }
    let doubleArrayValue = [];
    let singleArrayValue = [];
    if (this.testConnection == true) {

        let Field = this.getRootFields().field_values;
        //var query = "SELECT TOP 60 \"public\".basic.oid   FROM  \"public\".basic  JOIN   \"public\".otypes ON  \"public\".basic.oid= \"public\".otypes.oidref";
        var query = $("#getJsonAll").text();
        var a = "\\"
        let votableQueryResult
        //alert(query.substr(1))
        if (query.startsWith("SELECT TOP 60")) {
            //console.log(this.getRootQuery())
            //alert("dddddddddddd")
            votableQueryResult = this.tapService.Query(query);
        } else {
            //alert(query);
            // votableQueryResult = this.tapService.Query(query)


            votableQueryResult = this.tapService.Query(this.getRootQuery());
            this.tapButton = [];

        }
        if (votableQueryResult.statusText == "OK") {
            let dataTable = VOTableTools.votable2Rows(votableQueryResult);
            //let tableName = this.getConnector().service["table"];

            let nbCols = Field.length;
            // alert(nbCols);
            if (dataTable[dataTable.length - 1] == 0) {
                dataTable.splice(dataTable.length - 1, 1);
            }
            for (let rowNb = 0; rowNb < dataTable.length; rowNb += nbCols) {//table  content
                for (let col = 0; col < nbCols; col++) {
                    singleArrayValue.push(dataTable[col]);
                }
                doubleArrayValue.push(singleArrayValue);
                singleArrayValue = [];
            }
            //console.log(doubleArrayValue);
            jsonContaintRootQueryIdsValues.succes.status = "OK"
            jsonContaintRootQueryIdsValues.succes.field_ids = doubleArrayValue;

        } else {

            jsonContaintRootQueryIdsValues.failure.notConnected.status = "Failed";
            jsonContaintRootQueryIdsValues.failure.notConnected.message = "No active TAP connection"
            jsonContaintRootQueryIdsValues.failure.otherError.status = "failed"
            jsonContaintRootQueryIdsValues.failure.otherError.message = "error_message"
            // alert('you are not connected');
        }
    }

    return jsonContaintRootQueryIdsValues;

}

TapApi.prototype.getRootQuery = function () {
    var rootQueyJson = {status: "", query: "query"}
    var rootTable = this.connector.service["table"]// .jsonContaintJoinTable.Succes.base_table;
    var jsonAll = this.getObjectMap();
    var schema;
    var contentAdql = "";
    let listJoinAndId = this.getListJoinAndId(this.getConnector().service['table'], this.getObjectMap().succes.object_map);
    let listId = this.getListeId(listJoinAndId)
    // console.log(this.getJoinedTables())
    // console.log(rootTable)

    var dataTable = VOTableTools.votable2Rows(this.votableQueryResult);
    console.log(dataTable);
    var joinIdDic = {};
    /**
     * @TODO JUSTE POUR BESOIN DE DEVELLOPEMENT
     */
    /* const VizierUrl = "http://tapvizier.u-strasbg.fr/TAPVizieR/tap/sync";
     const XmmUrl = "http://xcatdb.unistra.fr/3xmmdr8/tap/sync";
     var jsonQuerySchema = {
         url : this.url,
         rootTable :root,
         withSchema :VizierUrl||XmmUrl? false:true
     }*/
    for (var i = 0; i < listJoinAndId.length; i = i + 2) {
        if (!json2Requete.isString(listJoinAndId[i])) {
            joinIdDic[listJoinAndId[i + 1]] = listJoinAndId[i][0];
        } else {
            joinIdDic[listJoinAndId[i + 1]] = listJoinAndId[i];
        }
    }
    var i = 0;
    var textJoinConstraint = "";
    var textWhereConstraint = "";
    this.tapWhereConstraint = [];
    this.tapJoinConstraint = []
    for (var keyRoot in jsonAll.succes.object_map) {
        if (keyRoot == rootTable) {

            console.log(keyRoot + " " + rootTable);
            schema = jsonAll.succes.object_map[keyRoot].schema;

            schema = schema.quotedTableName().qualifiedName;

            //var m = 0;
            for (var key in jsonAll.succes.object_map[keyRoot].join_tables) {

                var formatTableName = schema + "." + keyRoot;
                var formatJoinTable = schema + "." + key;
                var correctJoinFormaTable = formatJoinTable.quotedTableName().qualifiedName
                //alert(formatTableName);
                var correctTableNameFormat = formatTableName.quotedTableName().qualifiedName;
                //var schemaPrefix = "";
                //schemaPrefix = schema.quotedTableName().qualifiedName ;
                // console.log(schemaPrefix);
                // alert(correctTableNameFormat);
                //var temp1=[],temp2=[];
                contentAdql = "SELECT DISTINCT TOP 60 " + correctTableNameFormat + "." + jsonAll.succes.object_map[keyRoot].join_tables[key].target;
                contentAdql += " FROM  " + correctTableNameFormat;
                textJoinConstraint = " JOIN  " + correctJoinFormaTable + " ";
                //temp1.push(key);

                textJoinConstraint += "ON " + correctTableNameFormat + "." + jsonAll.succes.object_map[keyRoot].join_tables[key].target;
                textJoinConstraint += "=" + correctJoinFormaTable + "." + jsonAll.succes.object_map[keyRoot].join_tables[key].from;

                this.tapJoinConstraint.push([key, textJoinConstraint]);
                textJoinConstraint = "";

                let votableFields = this.getRootFields().field_values;

                ////console.log(k+"  iddic "+votableField[k]+" "+joinIdDic[key]+" "+dataTable[k])
                var k = 0;
                for (j = 0; j < votableFields.length; j++) {
                    //  console.log(votableField[j]+" =>  "+joinIdDic[key])
                    if (votableFields[j] == joinIdDic[key]) {
                        k = j;
                        //alert(votableField[j]+" "+joinIdDic[key])
                        // break
                    }

                }

                if (schema.indexOf("public") != -1 && contentAdql.indexOf("oid") != -1) {
                    textWhereConstraint = " WHERE " + jsonAll.succes.object_map[keyRoot].join_tables[key].from + "=" + dataTable[k];
                    this.tapWhereConstraint.push(textWhereConstraint);
                } else if (schema.indexOf("rr") != -1 && contentAdql.indexOf("ivoid=") == -1) {
                    //alert(schema+'.'+key+'.'+jsonAll.succes.object_map[keyRoot].join_tables[key].from );
                    textWhereConstraint = " WHERE " + schema + '.' + key + '.' + jsonAll.succes.object_map[keyRoot].join_tables[key].from + "=" + "\'" + dataTable[k] + "\'";
                    this.tapWhereConstraint.push(textWhereConstraint);
                } else if (schema.indexOf("public") != -1 && contentAdql.indexOf("oid") == -1) {
                    if (json2Requete.isString(dataTable[k])) {
                        textWhereConstraint += " WHERE " + schema + "." + key + "." + jsonAll.succes.object_map[keyRoot].join_tables[key].from + "=" + "\'" + dataTable[k] + "\'";
                        this.tapWhereConstraint.push(textWhereConstraint);
                    } else {
                        textWhereConstraint = " WHERE " + schema + "." + key + "." + jsonAll.succes.object_map[keyRoot].join_tables[key].from + "=" + dataTable[k];
                        this.tapWhereConstraint.push(textWhereConstraint);
                    }
                } else {
                    textWhereConstraint = " WHERE " + schema + "." + key + "." + jsonAll.succes.object_map[keyRoot].join_tables[key].from + "=" + "\'" + dataTable[k] + "\'";
                    this.tapWhereConstraint.push(textWhereConstraint);
                }

                //contentTable[dataTable[k]] = contentAdql;break;
                //break;

            }


            if (this.tapJoinConstraint.length == 0) {
                rootQueyJson.status = "OK";
                rootQueyJson.query = contentAdql;
                return contentAdql;
            } else {

                this.adqlContent = addConstraint(contentAdql, this.tapJoinConstraint, this.tapWhereConstraint);
                if (testRoot == false) {
                    testRoot = true;
                    contA = contentAdql;
                    rootQueyJson.status = "OK";
                    rootQueyJson.query = contentAdql;
                    return contentAdql;

                } else {
                    //console.log(finalQuery);
                    if (splitToJoin[0] != " " || splitToJoin[0] != undefined) {
                        rootQueyJson.status = "OK";
                        rootQueyJson.query = splitToJoin[0];;
                        return splitToJoin[0];
                        //return splitToJoin[0];
                    } else {
                        rootQueyJson.status = "OK";
                        rootQueyJson.query = finalQuery;
                        return finalQuery ;
                    }

                }

            }

            //console.log(this.tapJoinConstraint);
            // console.log(this.tapWhereConstraint);
            // return contentAdql;
        }
    }

}
let contA = "";
let testRoot = false;
testButton = false;
let tabAllQuery = []
let tab = []
let allQuery = "";
let finalQuery = "";
let tabContaninBtnRemoveConstraint = [];

let HtmltabContaninBtnRemoveConstraint = [];

var tempTab = [];
addConstraint = function (rootQuery, table, whereTable) {
    var buttons = "";
    var rootQuerys = []
    this.tapButton = []
    var removeBtn;
    var HtmlRemoveBtn;
    for (let i = 0; i < table.length; i++) {

        buttons = "<span>" +
            "<button  type='button' class=\"btn btn-default\" id='" + table[i][0] + "' value='" + table[i][0] + "' style=\"margin-top: 7px\">Join '" + table[i][0] + "'</button>" +
            " <input type='text' class='form form-control' id='txt" + table[i][0] + "' value='" + whereTable[i] + "'>"

        // button+="<button  type='button' class=\"btn btn-default\" id='"+table[i][0]+"' value='"+table[i][0]+"' style=\"margin-top: 7px\">Join '"+table[i][0]+"'</button>"

        if (testButton == true) {
            //alert( 'existe deja')
        } else {
            this.tapButton.push(buttons);
        }

        $("#loadButton").append(this.tapButton[i]);
        window.location.hash = "#loadButton";
        //var btns =this.tapButton;
        $("#" + table[i][0]).click(function () {


            for (let r = 0; r <= tabContaninBtnRemoveConstraint.length; r++) {
                if (tabContaninBtnRemoveConstraint.indexOf(tabContaninBtnRemoveConstraint[r]) > -1) {

                } else {

                    tabContaninBtnRemoveConstraint.push(table[i][0])
                    break;
                }

            }
            tabContaninBtnRemoveConstraint = Array.from(new Set(tabContaninBtnRemoveConstraint));


            //console.log(tabContaninBtnRemoveConstraint);

            // addRemoveBtn(tabContaninBtnRemoveConstraint);


            //rootQuerys;
            //if(rootQuerys.indexOf(rootQuerys[i])>-1){
            //alert( 'existe deja')
            display("Has  been added ", "getStatu")
            // rootQuerys.splice(rootQuerys.indexOf(rootQuerys[i],1));
            //rootQuery +=" "+table[i][1];
            //}else {
            // rootQuerys.push(table[i][1]);
            //rootQuery +=" "+table[i][1]+" "+$("#txt"+table[i][0]).val();

            $("#getJsonAll").text("");
            $("#getJsonAll").append(rootQuery);
            $("#getJsonAll").append(table[i][1]);
            $("#getJsonAll").append($("#txt" + table[i][0]).val());
            // rootQuery = $("#getJsonAll").text();
            //display(rootQuery,"getJsonAll")

            // alert("join value "+table[i][1])
            //  }
            this.adqlContent = [];
            $("#getJsonAll").html($("#getJsonAll").text());
            window.location.hash = "#loadJson";
            tab = []
            tab.push(table[i][1] + " " + whereTable[i]);

            this.adqlContent.push($("#getJsonAll").text());


            document.getElementById("loadButton").style.display = "none"
            document.getElementById("btnConstraint").style.display = "none";


        })


    }
    contA += tab
    allQuery = contA;
    tab = []
    //console.log(this.adqlContent)
    var tabAllQuery2 = []
    console.log(allQuery);
    tabAllQuery = allQuery.split("WHERE");
    let textTabAllQuery = [];
    var joinEssai = "";
    for (let i = 1; i < tabAllQuery.length; i++) {
        joinEssai += tabAllQuery[i];
        textTabAllQuery.push(tabAllQuery[i].split(" "));
    }
    var tabjoinEssai = joinEssai.split(" ");

    for (let i = 0; i < textTabAllQuery.length; i++) {
        tabAllQuery2.push(textTabAllQuery[i][1]);
        tabAllQuery[i + 1].replaceAll(" " + tabAllQuery2[i], " ");
        for (let j = 0; j < tabjoinEssai.length; j++) {
            if (tabjoinEssai[j].trim() == tabAllQuery2[i].trim()) {
                tabjoinEssai.splice(j, 1);
            }
            //joinEssai +=tabjoinEssai[j];
        }

    }
    //var tabAllQuery2 = textTabAllQuery.split(" ");

    console.log(tabAllQuery);
    var final1 = tabAllQuery[0] + " ";
    for (let k = 0; k < tabjoinEssai.length; k++) {
        final1 += tabjoinEssai[k] + " ";
    }
    var final2 = final1;
    if (tabAllQuery2.length > 0) {

        final2 += " WHERE " + tabAllQuery2[0];
    }
    for (let c = 1; c < tabAllQuery2.length; c++) {
        let m = tabAllQuery2[c]
        for (let k = 1; k < tabAllQuery2.length; k++) {
            if (m.trim() == tabAllQuery2[k].trim()) {

            } else {
                if (m.trim() != tabAllQuery2[0].trim()) {
                    final2 += " AND " + tabAllQuery2[c]
                }

            }
        }

    }
    finalQuery = final2;
    $("#getJsonAll").text(finalQuery);
    //console.log("////////////////////////////////////////////////////////////////////////////////////");
    //console.log(final1);
    // console.log(final2);
    testButton = true

    // console.log(this.tapButton);

    // return finalQuery
}
var splitToJoin = [];
var finalQueryRemouve = "";
TapApi.prototype.resetTableConstraint = function (table) {

    //alert(table);
    var schema = this.connector.service["schema"];
    var formatTableName = schema + "." + table;

    var correctTableNameFormat = formatTableName.quotedTableName().qualifiedName;
    if (finalQuery != "") {
        splitToJoin = finalQuery.split('JOIN')
    }

    for (let i = 1; i < splitToJoin.length; i++) {
        if (splitToJoin[i].search(table) != -1) {
            splitToJoin.splice(splitToJoin.indexOf(splitToJoin[i]), 1);
            // finalQuery.replaceAll(splitToJoin[i].trim(), "");
        } else if (splitToJoin.length > 1) {

            splitToJoin[0] += " JOIN " + splitToJoin[i]

        }
        //console.log(splitToJoin)
        if (splitToJoin[i] == undefined) {
            //splitToJoin[i] = "";
        }


    }
    //  splitUndefine = splitToJoin[0];


    //finalQuery = finalQueryRemouve;
    console.log("$$$$$$$$$$$$$$$$$$$$$$$$$$$ " + splitToJoin[0])
    //finalQuery =splitToJoin[0];
    //$("#getJsonAll").text(splitToJoin[0]);
    console.log(splitToJoin[0]);
    tab = [];
    return splitToJoin[0];
}

//var splitUndefine;
function reset() {
    contA = "";
    this.query = "";
    this.tapService = "";
    this.votableQueryResult = "";
    this.correctService = "";
    this.connector.service = {};
    this.testConnection = false;
    this.testDeconnection = false;
    this.correctService = "";
    this.votableQueryResult = "";
    this.query = ""
    this.handlerAttribut = new HandlerAttributs();
    this.tapButton = [];
    this.adqlContent = [];
    this.testJoinConstraint = false;
    this.connector = {status: "", message: "", service: {}}
    this.jsonContaintJoinTable = {
        Succes: {
            status: "",
            base_table: "",
            joined_tables: []
        },
        Failure: {
            NotConnected: {status: "", message: ""},
            WrongTable: {status: "", message: ""}
        }
    }
    finalQuery = "";
    this.tapJoinConstraint = [];
    this.tapWhereConstraint = [];
    contA = "";
    testRoot = false;
    testButton = false;
    tabAllQuery = []
    tab = []
    allQuery = "";
    $(document).ajaxStop(function () {
        window.location.reload();
    });

}

TapApi.prototype.getTableAttributeHandlers = function (table) {

    return this.handlerAttribut.getTableAttributeHandler(table);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


TapApi.prototype.getRootQuery1 = function () {
    let out = "";
    let query
    if (this.testConnection == true) {
        let listJoinAndId = this.getListJoinAndId(this.getConnector().service['table'], this.getObjectMap().succes.object_map);
        let listId = this.getListeId(listJoinAndId)
        // alert(listId);
        //alert(listJoinAndId)
        out = this.tapService.createMainJson(this.query, this.getObjectMap().succes.object_map, this.getConnector().service["table"], listId, listJoinAndId);
        query = json2Requete.getAdql(this.getObjectMap().succes.object_map);
    }

    return query;
}


/**
 *
 * @param {*} listJoinAndId the list of id returned by TapServiceConnector.prototype.getListJoinAndId
 * @return   list of all id
 */

TapApi.prototype.getListeId = function (listJoinAndId) {
    var listId = [];
    for (var i = 0; i < listJoinAndId.length; i = i + 2) {
        if (!json2Requete.isString(listJoinAndId[i])) {
            var temp = listJoinAndId[i][0];
        } else {
            var temp = listJoinAndId[i];
        }
        if (listId.indexOf(temp) == -1) {
            listId.push(temp);//record the key linked to root table, No repeating
        }
    }
    return listId;
}
/**
 *
 *  @param {*} rootName |the root table names of tabservice
 * @param {*} mainJsonData the main json generated by the  method createJson()
 * @returns return array containing all join table with correct id
 */
TapApi.prototype.getListJoinAndId = function (rootName, mainJsonData) {
    //alert(rootName);
    var listJoinAndId = [];
    listJoinAndId = this.joinAndId(rootName, mainJsonData)
    return listJoinAndId;
}
/**
 *
 * @param {*} root  represent the root table
 * @param {*} json represent the main json create by the method createMainJson
 * @returns return the list of id of join table
 */
TapApi.prototype.joinAndId = function (root, json) {
    var list = [];
    for (var key in json) {
        if (key == root) {
            for (var join in json[key].join_tables) {
                list.push(json[key].join_tables[join].target);
                list.push(join);
            }
        }
    }
    return list;
}

TapApi.prototype.joinTable = function (table) {
    let jsonAll = this.getObjectMap().succes.object_map;
    let joinTable = [];

    //alert(jsonAll[table]);
    if (jsonAll[table] == undefined) {
        let json = {}
        jsonAll = json;
        joinTable.push(table);
        //alert(JSON.stringify(joinTable,undefined,2))
    } else {
        // alert(table+ " has join table")
        for (let key in jsonAll[table].join_tables) {
            //alert(key)
            if (key.indexOf("2") != -1) {
                continue; //same rootTable and join_table, I made the second name of the repeat followed by a number 2//@TODO
            } else {
                joinTable.push(key);
            }
        }
    }

    console.log(JSON.stringify(joinTable, undefined, 2));
    return joinTable;
};



////////////////////////////////////////////////////////////////////////////////////////////

document.write("<script type='text/javascript' src= '../../module/js/json2Requete.js'></script>");

const Simbadschema = "public";

var test = false;

function display(data, id) {
    $("#" + id).html(data);
    window.location.hash = "#loadJson";
}

function reset() {
    display("", "getJsonConnector")
    display("", "getJsonObjectMap")
    display("", "getJsonRootField")
    display("", "getJsonJoinTable")
    display("", "getJsonRootFieldValue")
    display("", "getJsonRootQuery")
    display("", "getStatu");
    display("", "getJsonAll")
}

var a = new TapApi();
var params = {
    tapService: "",
    schema: "",
    table: "",
    shortName: ""
}

var statusf = "failed"
var message = "The service is disconnected ! connect service and try again ..."

function remouveAtive(g) {
    if (document.getElementById("" + g).classList.contains('btn-dark')) {
        document.getElementById("" + g).classList.add('btn-success');
        document.getElementById("" + g).classList.remove('btn-dark');
    }
}

function removeConnectActive(g) {
    if (document.getElementById("" + g).classList.contains('btn-success')) {
        document.getElementById("" + g).classList.remove('btn-success');
        document.getElementById("" + g).classList.add('btn-secondary');
    }
}

function ConnectActive(a, b) {

    document.getElementById("" + a).classList.remove('btn-secondary');
    document.getElementById("" + a).classList.add('btn-success');
    removeConnectActive(b)
}

function setActive(btnId, g, c, x, v, a) {


    document.getElementById("" + btnId).classList.remove('btn-success');
    document.getElementById("" + btnId).classList.add('btn-dark');
    remouveAtive(g);
    remouveAtive(c);
    remouveAtive(x);
    remouveAtive(v)
    remouveAtive(a)

}

function OnChangeRadio(radio) {
    // alert ("The " + radio.value + " radio is selected.");
    switch (radio.value) {
        case "Simbad":
            if (a.testConnection == false) {
                params.tapService = "http://simbad.u-strasbg.fr/simbad/sim-tap/sync"
                params.schema = Simbadschema;
                params.table = "basic";
                params.shortName = "Simbad";
                display(params.shortName + " is now initialised click now to connect button to connect service", "getStatu")
            } else {
                display("another service is currently connected ! Disconnect the service an try again", 'getStatu')
            }
            ;
            break;
        case "Gavo":
            if (a.testConnection == false) {
                params.tapService = "http://dc.zah.uni-heidelberg.de/tap/sync"
                params.schema = "rr";
                params.table = "resource";
                params.shortName = "Gavo";
                display(params.shortName + " is now initialised click now to connect button to connect service", "getStatu")
            } else {
                display("another service is currently connected ! Disconnect the service an try again", "getStatu")
            }
            ;
            break;

        case "Caom":
            if (a.testConnection == false) {
                params.tapService = "http://vao.stsci.edu/CAOMTAP/tapservice.aspx/sync"
                params.schema = "dbo";
                params.table = "CaomObservation";
                params.shortName = "CAOM";
                display(params.shortName + " is now initialised click now to connect button to connect service", "getStatu")
            } else {
                display("another service is currently connected ! Disconnect the service an try again", "getStatu")
            }
            ;
            break;
        case "Xmm":
            if (a.testConnection == false) {
                params.tapService = "http://xcatdb.unistra.fr/3xmmdr8/tap/sync"
                params.schema = "EPIC";
                params.table = "EPIC_IMAGE";
                params.shortName = "3XMM";
                //var adql = "SELECT  TOP 1  * FROM EPIC.EPIC_IMAGE "
                display(params.shortName + " is now initialised click now to connect button to connect service", "getStatu")
            } else {
                display("another service is currently connected ! Disconnect the service an try again", "getStatu")
            }
            ;
            break;

        case "Vizier":
            if (a.testConnection == false) {
                params.tapService = "http://tapvizier.u-strasbg.fr/TAPVizieR/tap/sync"
                params.schema = "metaviz";
                params.table = "METAcat";
                params.shortName = "Vizier";
                //var adql = "SELECT  TOP 100  * FROM metaviz.METAcat"
                display(params.shortName + " is now initialised click now to connect button to connect service", "getStatu")
            } else {
                display("another service is currently connected ! Disconnect the service an try again", "getStatu")
            }
            ;
            break;
    }
}

function newMain() {

    // initial();

////////////////////////////// API ////////////////////////////////////////////


    $("#btnApiConnectS").click(function () {
        // alert(a.testConnection);
        if (a.testConnection == false) {
            if (params.tapService != "" && params.schema != "" && params.table != "" && params.shortName != "") {
                a.connect(params);
                let status = a.connector.status;
                //alert("you are now connected")
                document.getElementById("testContent").style["display"] = "none";
                display(status, "getStatu");
                ConnectActive("btnApiConnectS", "btnApiDisconnect")
            } else {
                display("no service selected... Choose service first and try again", "getStatu");

            }
        } else {
            display("the service is  already connected ! disconnect the service and try again ...", "getStatu");

            //alert("the service is  already connected ! disconnect the service and try again ...")
        }


    });

    $("#btnGetConnector").click(function () {
        if (a.testConnection == true) {

            let connector = JSON.stringify(a.getConnector().service, undefined, 2);
            let status = a.getConnector().status;
            display(status, "getStatu");
            display(connector, "getJsonAll")
            setActive("btnGetConnector", "btnGetObjectMap", "btnGetJoinTable", "btnGetRootField", "btnGetRootFieldValue", "btnGetRootQuery")
        } else {
            display(statusf, "getStatu");
            display(message, "getJsonAll")
            //alert("The service is disconnected ! connect service and try again ..." )
        }
    })

    $("#btnGetObjectMap").click(function () {
        if (a.testConnection == true) {
            let objectMap = JSON.stringify(a.getObjectMap(), undefined, 2);
            let status = a.getObjectMap().succes.status;
            display(status, "getStatu");
            display(objectMap, "getJsonAll")
            a.joinTable("basic");
            alert($("#btnGetObjectMap").val())
            setActive("btnGetObjectMap", "btnGetConnector", "btnGetJoinTable", "btnGetRootField", "btnGetRootFieldValue", "btnGetRootQuery")
        } else {
            display(statusf, "getStatu");
            display(message, "getJsonAll")
            // alert("The service is disconnected ! connect service and try again ..." )
        }
    })

    $("#btnGetJoinTable").click(function () {
        if (a.testConnection == true) {

            let joinTables = JSON.stringify(a.getJoinedTables(params.table).Succes, undefined, 2);
            let status = a.getJoinedTables(params.table).Succes.status;
            display(status, "getStatu");
            display(joinTables, "getJsonAll")
            setActive("btnGetJoinTable", "btnGetObjectMap", "btnGetConnector", "btnGetRootField", "btnGetRootFieldValue", "btnGetRootQuery")
        } else {
            display(statusf, "getStatu");
            display(message, "getJsonAll")
            //alert("The service is disconnected ! connect service and try again ..." )
        }
    })
    $("#btnGetRootField").click(function () {
        if (a.testConnection == true) {

            let rootFields = JSON.stringify(a.getRootFields(), undefined, 2);
            let status = a.getRootFields().status;
            display(status, "getStatu");
            display(rootFields, "getJsonAll")
            setActive("btnGetRootField", "btnGetJoinTable", "btnGetObjectMap", "btnGetConnector", "btnGetRootFieldValue", "btnGetRootQuery")
        } else {

            display(statusf, "getStatu");
            display(message, "getJsonAll")
            // alert("The service is disconnected ! connect service and try again ...")
        }
    })

    $("#btnGetRootFieldValue").click(function () {
        if (a.testConnection == true) {

            let rootFieldValues = JSON.stringify(a.getRootFieldValues().succes, undefined, 3);
            let status = a.getRootFieldValues().succes.status;
            display(status, "getStatu");
            display(rootFieldValues, "getJsonAll")

            setActive("btnGetRootFieldValue", "btnGetRootField", "btnGetJoinTable", "btnGetObjectMap", "btnGetConnector", "btnGetRootQuery")
        } else {
            display(statusf, "getStatu");
            display(message, "getJsonAll")
            //alert("The service is disconnected ! connect service and try again ..." )
        }
    })
    var temp = '';
    var isCallRootQuery = false;
    var tabContainRemoveQuery = []
    var tesTabCRQ = false;
    let testRemoveButton = false;
    $("#btnGetRootQuery").click(function () {

        if (a.testConnection == true) {
            let rootQuery;
            //if(isCallRootQuery == false){
            //t//his.tapWhereConstraint =[];
            // this.tapJoinConstraint =[]
            rootQuery = JSON.stringify(a.getRootQuery(), undefined, 2);
            //  temp = rootQuery;
            // alert(temp);
            // isCallRootQuery = true;
            //  }else {
            // alert(temp);
            // rootQuery = temp;
            // }

            tesTabCRQ = true;
            //rootQuery = a.addConstraint(rootQuery,this.tapJoinConstraint,this.tapWhereConstraint)
            let status = a.getRootQuery().success.status;
            // rootQuerys=[]
            $("#rootQuery").val(rootQuery);
            display(status, "getStatu");
            display(rootQuery, "getJsonAll")
            //a.resetTableConstraint("otypes");

            setActive("btnGetRootQuery", "btnGetRootFieldValue", "btnGetRootField", "btnGetJoinTable", "btnGetObjectMap", "btnGetConnector")
            document.getElementById("btnConstraint").style.display = "block";

            document.getElementById("btnRemoveConstraint").style.display = "block";
            let table
            $("#btnRemoveConstraint").click(function () {
                document.getElementById("loadRemoveButton").style.display = "block"

                var HtmlRemoveBtn = "";

                table = Array.from(new Set(tabContaninBtnRemoveConstraint));
                console.log(table.length);


                var k =0;


                    // var t = table[i];
                    HtmlRemoveBtn += " <button  type='button' class=\"btn btn-danger\" id='rbtnConstraint' value='" + table[i] + "' style=\"margin-top: 7px\">Remove Join Table</button>" +
                        "<input type='text' class='form form-control' id='txtConstraint' value= '' placeholder='name of table : exp,otypes'>"
                    // button+="<button  type='button' class=\"btn btn-default\" id='"+table[i][0]+"' value='"+table[i][0]+"' style=\"margin-top: 7px\">Join '"+table[i][0]+"'</button>"

                    if (testRemoveButton == true) {
                        //alert( 'existe deja')
                    } else {
                        HtmltabContaninBtnRemoveConstraint.push(HtmlRemoveBtn);
                    }
                    HtmltabContaninBtnRemoveConstraint = Array.from(new Set(HtmltabContaninBtnRemoveConstraint));
                    //$("#loadRemoveButton").html("");
                   $("#loadRemoveButton").html(HtmlRemoveBtn);
                    window.location.hash = "#loadRemoveButton";

                    $("#rbtnConstraint").click(function () {
                        for (let i = 0; i < table.length; i++) {
                            if ($("#txtConstraint").val() == "") {
                                display("Faille", "getStatu");
                                display("Inter the name of table you want ton remove constraint", "getJsonAll")

                                //document.getElementById("loadRemoveButton").style.display = "block"
                            } else if ($("#txtConstraint").val() == table[i]) {

                                document.getElementById("loadRemoveButton").style.display = "none"
                                display(status, "getStatu");
                                display(a.resetTableConstraint(table[i]), "getJsonAll")
                            }else {

                            }
                        }

                       /* tabContaninBtnRemoveConstraint.splice(table.indexOf(tabContaninBtnRemoveConstraint.indexOf(tabContaninBtnRemoveConstraint[i]),1));
                        console.log(tabContaninBtnRemoveConstraint)
                        $("#loadRemoveButton").html("");
                        window.location.hash = "#loadRemoveButton";
                        document.getElementById("loadRemoveButton").style.display = "none";*/
                    })



                testRemoveButton = true;
                setActive("btnRemoveConstraint", "btnGetRootQuery", "btnGetRootFieldValue", "btnGetRootField", "btnGetJoinTable", "btnGetObjectMap")

            })
            $("#btnConstraint").click(function () {
                //console.log(a.getTableAttributeHandlers("basic"));
                // let rootQuer= addConstraint(rootQuery,a.tapJoinConstraint);



                document.getElementById("loadButton").style.display = "block"


                setActive("btnConstraint", "btnGetRootQuery", "btnGetRootFieldValue", "btnGetRootField", "btnGetJoinTable", "btnGetObjectMap")
            })
        } else {
            display(statusf, "getStatu");
            display(message, "getJsonAll")
            //alert("The service is disconnected ! connect service and try again ..." )
        }
    })

    function addRemoveBtn(table) {
        display(status, "getStatu");
        display(a.resetTableConstraint(table[i]), "getJsonAll")
        tabContaninBtnRemoveConstraint.splice(table.indexOf(tabContaninBtnRemoveConstraint[i],1));
        console.log(tabContaninBtnRemoveConstraint)
        $("#loadRemoveButton").html("");
        window.location.hash = "#loadRemoveButton";
        document.getElementById("loadRemoveButton").style.display = "none";
    }

    var testButton = false;
//var h = new HandlerAttributs();
    var tapButton = [];
    $("#btnLoadbuttonsHandler").click(function () {
        this.tapWhereConstraint = [];
        this.tapJoinConstraint = []
        tapButton = [];
        a.getRootQuery();
        var table = a.tapJoinConstraint;
        //alert(table.length)
        for (let i = 0; i < table.length; i++) {
            var buttons = "<button  type='button' class=\"btn btn-warning\" id='b" + table[i][0] + i + "' value='" + table[i][0] + "' style=\"margin-top: 7px\">handler '" + table[i][0] + "'</button></span>"
            // button+="<button  type='button' class=\"btn btn-default\" id='"+table[i][0]+"' value='"+table[i][0]+"' style=\"margin-top: 7px\">Join '"+table[i][0]+"'</button>"

            if (testButton == true) {
                //alert( 'existe deja')
            } else {
                tapButton.push(buttons);
            }
            document.getElementById("loadbuttonsHandler").style.display = "block"

            $("#loadbuttonsHandler").append(tapButton[i]);
            window.location.hash = "#loadbuttonsHandler";
            $("#b" + table[i][0] + i).click(function () {
                //alert(table[i][0])
                document.getElementById("loadbuttonsHandler").style.display = "none"
                var json = a.getTableAttributeHandlers(table[i][0]);
                console.log(json);
                display(json.status, "getStatu")

                // document.getElementById("loadbuttonsHandler").style.display = "none"
                display(JSON.stringify(json, undefined, 2), "getJsonAll")

            })
        }
        testButton = true;
        /*var json = a.getTableAttributeHandlers('otypes');
        console.log(json);
         display(json.succes.status, "getStatu")

        // document.getElementById("loadbuttonsHandler").style.display = "none"
         display(JSON.stringify(json.succes, undefined, 2), "getJsonAll")*/


    })

    $("#btnGetRootQueryId").click(function () {
        if (a.testConnection == true) {
            let rootValue = JSON.stringify(a.getRootQueryIds().succes, undefined, 3);
            let status = a.getRootQueryIds().succes.status;
            display(status, "getStatu");
            display(rootValue, "getJsonAll")
            setActive("btnGetRootQueryId", "btnGetRootFieldValue", "btnGetRootField", "btnGetJoinTable", "btnGetObjectMap", "btnGetConnector")
        } else {
            display(statusf, "getStatu");
            display(message, "getJsonAll")
            //alert("The service is disconnected ! connect service and try again ..." )
        }
    })


    $("#btnApiDisconnect").click(function () {
        $(document).ajaxStop(function () {
            window.location.reload();
        });
        if (a.testConnection == true) {
            a.disconnect();

            if (a.testDeconnection == false) {
                a.disconnect();
                reset();
                display("The service is now disconnected", "getStatu")

                ConnectActive("btnApiDisconnect", "btnApiConnectS")
                document.getElementById("testContent").style["display"] = "none";
            }
            a.testDeconnection = false;
        } else {
            display("The service are already disconnected", "getStatu");
        }

    })

    /////////////////////////// END API //////////////////////////
    var rootQuerys = []

    function addConstraint(rootQuery, table) {
        var buttons = "";
        var tapButton = [];

        for (let i = 0; i < table.length; i++) {

            buttons = "<button  type='button' class=\"btn btn-default\" id='" + table[i][0] + "' value='" + table[i][0] + "' style=\"margin-top: 7px\">Join '" + table[i][0] + "'</button>"
            // button+="<button  type='button' class=\"btn btn-default\" id='"+table[i][0]+"' value='"+table[i][0]+"' style=\"margin-top: 7px\">Join '"+table[i][0]+"'</button>"

            tapButton.push(buttons);
            $("#loadButton").append(tapButton[i]);
            window.location.hash = "#loadButton";
            $("#" + table[i][0]).click(function () {


                if (rootQuerys.indexOf(rootQuerys[i]) > -1) {
                    alert('existe deja')
                } else {
                    rootQuerys.push(table[i][1]);
                    rootQuery += " " + table[i][1];


                    $("#getJsonAll").text(rootQuery);
                    $("#getJsonAll").html(rootQuery);
                    window.location.hash = "#loadJson";
                    //display(rootQuery,"getJsonAll")

                    // alert("join value "+table[i][1])
                }


            })


        }

        // console.log(tapButton);
        return rootQuery;
    }


    var mainData, newMainData;
    var listJoinTable;
    var queryTable, index;
    $("#btnSimbad").click(function () {
        var simbadService = new TapServiceConnector("http://simbad.u-strasbg.fr/simbad/sim-tap/sync", Simbadschema, "Simbad");
        var data = simbadService.loadJson();
        var sj = new jsonRead(data);
        //alert(sj.joinTable('basic'))
        var output = "";
        output += sj.showAll(data);
        $("#loadJson").html(output);
        window.location.hash = "#loadJson"
    });

    $("#btnBasic").click(function () {
        var simbadService = new TapServiceConnector("http://simbad.u-strasbg.fr/simbad/sim-tap/sync", Simbadschema, "Simbad");
        var value = $("#selectToJoin").val()
        var adqlQuery = $("#txtArea").val();
        simbadService.setAdqlQuery(adqlQuery);
        var data = simbadService.loadJson();
        $("#loadJson").html(JSON.stringify(data, undefined, 2));
        window.location.hash = "#loadJson"
        var QObject = simbadService.connect();
        var listJoinAndId = simbadService.getListJoinAndId('basic', data);
        var listId = simbadService.getListeId(listJoinAndId);
        var mainData = simbadService.tapService.createMainJson(simbadService.getAdqlQuery(), data, 'basic', listId, listJoinAndId);

        getTableJsonQueryValue(mainData, simbadService, 'basic');
        var tableContentJoinTable = getJoinTable(mainData);

        $("#selectDiv").html(selectTableToJoin_html(tableContentJoinTable))
        window.location.hash = "#selectDiv"
        var out = simbadService.joinTableByField(mainData, 'basic')

    });

////////////////////////////// block service connection /////////////////////////////////////////////////////

    $("#connectBasic").click(function () {
        var adql = "SELECT TOP 1* FROM \"public\".basic"
        const Schemas = "public";
        const Url = "http://simbad.u-strasbg.fr/simbad/sim-tap/sync";
        const ShortName = "Simbad";
        var tableName = 'basic'
        $(window).load(function () {
            $(".loader").fadeOut("1000");
        })
        var simbadServices = connectDatabase(Url, Schemas, ShortName, adql, tableName);


    });

    $("#connectResource").click(function () {
        var adql = "SELECT TOP 1* FROM rr.resource "
        const Schemas = "rr";
        const Url = "http://dc.zah.uni-heidelberg.de/tap/sync";
        const ShortName = "Gavo";
        var tableName = 'resource'
        var gavoServices = connectDatabase(Url, Schemas, ShortName, adql, tableName);
    })
    $("#connectCaomObservation").click(function () {
        var adql = "SELECT  TOP 1 dbo.CaomObservation.* FROM dbo.CaomObservation"
        const Schemas = "dbo";
        const Url = "http://vao.stsci.edu/CAOMTAP/tapservice.aspx/sync";
        const ShortName = "CAOM";
        var tableName = 'CaomObservation'
        var caomServices = connectDatabase(Url, Schemas, ShortName, adql, tableName);
    })

    $("#connectMETACat").click(function () {

        var adql = "SELECT  TOP 100  * FROM metaviz.METAcat"
        const Schemas = "metaviz";
        const Url = "http://tapvizier.u-strasbg.fr/TAPVizieR/tap/sync";
        const ShortName = "Vizier";
        var tableName = 'METAcat'
        var caomServices = connectDatabase(Url, Schemas, ShortName, adql, tableName);
    })
    $("#connectEPIC_IMAGE").click(function () {
        var adql = "SELECT  TOP 1  * FROM EPIC.EPIC_IMAGE "
        const Schemas = "EPIC";
        const Url = "http://xcatdb.unistra.fr/3xmmdr8/tap/sync";
        const ShortName = "3XMM";
        var tableName = 'EPIC_IMAGE'
        var caomServices = connectDatabase(Url, Schemas, ShortName, adql, tableName);
    })

    function showLoader() {
        var head = document.getElementsByTagName('HEAD')[0];

        // Create new link Element
        var link = document.createElement('link');

        // set the attributes for link element
        link.rel = 'stylesheet';

        link.type = 'text/css';

        link.href = 'css/main.css';

        // Append link element to HTML head
        head.appendChild(link);
        $("head").append('<script type="text/javascript" src="js/vendor/modernizr-2.6.2.min.js""></script>');
    }

    /**
     *
     * @param {*} urlPath   the base urlPath of tapService exemple : http://xcatdb.unistra.fr/3xmmdr8/tap/sync
     * @param {*} schema    the schema of database exemple : for Gavo database, schema = "rr"
     * @param {*} shortname the shortname of database like Gavo for gavo database
     * @param {*} adql      the request you want for choosing table. exemble : SELECT TOP 1* FROM rr.resource for gavo
     * @param {*} tableName the name of table in datable like resource table in gavo database
     */
    var flag;

    function connectDatabase(urlPath, schema, shortname, adql, tableName) {
        showLoader();
        var databaseServices = new TapServiceConnector(urlPath, schema, shortname);
        var value = $("#selectToJoin").val()
        var adqlQuery = $("#txtArea").val(adql);
        databaseServices.setAdqlQuery(adqlQuery.val());
        //alert(urlPath)
        var data = databaseServices.loadJson();
        if (data[tableName] == undefined) {
            data = {
                tables: {
                    "base_table": tableName,
                    "join_table": {}
                }
            }
            //alert(JSON.stringify(joinTable,undefined,2))
        }

        $("#loadJson").html(JSON.stringify(data, undefined, 2));
        window.location.hash = "#loadJson"
        var listJoinAndId = databaseServices.getListJoinAndId(tableName, data);
        var listId = databaseServices.getListeId(listJoinAndId);
        // alert(adqlQuery.val());
        var mainData = databaseServices.tapService.createMainJson(databaseServices.getAdqlQuery(), data, tableName, listId, listJoinAndId);

        getTableJsonQueryValue(mainData, databaseServices, tableName);
        var tableContentJoinTable = getJoinTable(mainData);
        if (tableContentJoinTable.length == 0) {
            tableContentJoinTable.push(tableName);
            mainData = databaseServices.tapService.createMainJson(databaseServices.getAdqlQuery(), data, tableName, listId, listJoinAndId);


        }
        $("#selectDiv").html(selectTableToJoin_html(tableContentJoinTable))
        window.location.hash = "#selectDiv"
        var out = databaseServices.joinTableByField(mainData, tableName, urlPath, schema, shortname);

        return databaseServices;
    }


    /**
     *
     * @param {*} tableContentJoinTable  the table tha containing all join table get by calling the method
     *                                   getJoinTable(mainData) parse insite the main json data create by method
     *                                   createMainJson(@parameters)
     * @return {*}   return a html div with select option menu that containt all join table as option
     */


    /**
     *
     * @param {*} json the main json create by the method createMainJson(@params)
     * @returns   return all array containing all join table of the main json
     */
    function getJoinTable(json) {
        var tableContentJoinTable = [];
        Object.keys(json).forEach(function (key) {
            var value = key;
            tableContentJoinTable.push(value);
            //console.log(isJSON(mainData));
        });
        return tableContentJoinTable;
    }

///////////////////////////////////////////////////////////////////////////////


    $("#refresh").click(function () {
        var value = $("#selectToJoin").val()
        // alert("dfffffffff")
        var adqlQuery = $("#txtArea").val();
        var data = simbadService.loadJson();
        var QObject = simbadService.connect();
        var listJoinAndId = simbadService.getListJoinAndId('basic', data);
        var listId = simbadService.getListeId(listJoinAndId);
        mainData = simbadService.tapService.createMainJson(adqlQuery, data, 'basic', listId, listJoinAndId);
        /*listJoinTable = getJoinTable(mainData);
        queryTable = getTableJsonQueryValue(mainData);
        index = listJoinTable.indexOf(value);
         simbadService.setAdqlQuery(queryTable[index]);
         newMainData = mainJsonData(queryTable[index])
        test=true;

        listJoinTable = getJoinTable(newMainData);
        queryTable = getTableJsonQueryValue(newMainData);
        index = listJoinTable.indexOf(value);
         simbadService.setAdqlQuery(queryTable[index]);
         newMainData = mainJsonData(queryTable[index])*/

        var out = simbadService.joinTableByField(mainData, 'basic')
    })


    $("#btnQuery").click(function () {
        var adqlQuery = $("#txtArea").val();
        simbadService.connectService(adqlQuery);
        var data = simbadService.loadJson();
        simbadService.setAdqlQuery(adqlQuery);
        var QObject = simbadService.connect();
        var sj = new jsonRead(data);
        var listJoinAndId = simbadService.getListJoinAndId('basic', data);
        var listId = simbadService.getListeId(listJoinAndId);
        simbadService.setAdqlQuery(adqlQuery);

        mainData = simbadService.tapService.createMainJson(adqlQuery, data, 'basic', listId, listJoinAndId);
        $("#loadJson").html(JSON.stringify(mainData, undefined, 2));
        window.location.hash = "#loadJson"

        var out = simbadService.joinTableByField(mainData, 'basic')
        $("#votableJson").html(out);
        window.location.hash = "#votableJson"
        // console.log(out)
        getTableJsonQueryValue(mainData);
        var a = getJoinTable(mainData);
        $("#selectDiv").html(selectTableToJoin_html(a))
        window.location.hash = "#selectDiv"
    });


    $("#btnBuild").click(function () {
        var value = $("#selectToJoin").val()
        var data = simbadService.loadJson();
        var QObject = simbadService.connect();
        var listJoinAndId = simbadService.getListJoinAndId('basic', data);
        var listId = simbadService.getListeId(listJoinAndId);
        mainData = simbadService.tapService.createMainJson(simbadService.getAdqlQuery(), data, 'basic', listId, listJoinAndId);
        /*listJoinTable = getJoinTable(mainData);
        queryTable = getTableJsonQueryValue(mainData);
        index = listJoinTable.indexOf(value);
         simbadService.setAdqlQuery(queryTable[index]);
         newMainData = mainJsonData(queryTable[index])
        test=true;

        listJoinTable = getJoinTable(newMainData);
        queryTable = getTableJsonQueryValue(newMainData);
        index = listJoinTable.indexOf(value);
         simbadService.setAdqlQuery(queryTable[index]);
         newMainData = mainJsonData(queryTable[index])*/

        var out = simbadService.joinTableByField(mainData, 'basic')
        //document.getElementById("btnJoin").style["display"] = "block";


    })
    $("#btnJoin").click(function () { //document.getElementById("btnBuild").style["display"] = "none";
        listJoinTable = getJoinTable(newMainData);
        var data = simbadService.loadJson();
        // queryTable = getTableJsonQueryValue(newMainData);
        //index = listJoinTable.indexOf(value);
        // simbadService.setAdqlQuery(queryTable[index]);
        // newMainData = mainJsonData(queryTable[index])
        var QObject = simbadService.connect();
        var out = simbadService.setRootTable(data, 'basic')
        $("#votableJson").html(out);
        window.location.hash = "#votableJson"
        // alert(out)

    })
}


function mainJsonData(adql) {
    var data = simbadService.loadJson();
    var QObject = simbadService.connect();
    var listJoinAndId = simbadService.getListJoinAndId('basic', data);
    var listId = simbadService.getListeId(listJoinAndId);
    return simbadService.tapService.createMainJson(adql, data, 'basic', listId, listJoinAndId);
    ;

}


function getTableJsonQueryValue(json, simbadService, tableBase) {
    var data = simbadService.loadJson();
    // var QObject = simbadService.connect();
    var listJoinAndId = simbadService.getListJoinAndId(tableBase, data);
    // var listId = simbadService.getListeId(listJoinAndId);
    var tableContentQuery = [];
    //var tableContentInstanceOfMainData=[]
    Object.keys(json).forEach(function (key) {
        var value = json[key];
        Object.keys(value).forEach(function (key) {
            var valu;
            if (key != "key") {
                valu = value[key];
                tableContentQuery.push(valu);

            }
        });

        //console.log(isJSON(mainData));
    });


    //  console.log(tableContentInstanceOfMainData[0])
    return tableContentQuery;
}


var votable2data = function (vObject) {
    var contentText = "";
    contentText = vObject.responseText;
    var method = contentText.indexOf("base64");
    var data
    if (method != -1) {
        data = VOTableTools.content2Rows(contentText);
    }
    ;

    return data;
};

function createVoTableResultJson(votableQueryResult, s) {

    var voTableData = VOTableTools.votable2Rows(votableQueryResult);
    var data = votable2data(votableQueryResult)
    var votableField = VOTableTools.getField(votableQueryResult);
    var jsonData = {
        data: {}
    }
    var k = 0;

    /* jsonData = {votableField:voTableData[i]}
    for (var j = 0; j <votableField.length ; j = j + 1) {
      for(var i=0;i<data.length;i++){
      jsonData.data[votableField[j]] =voTableData[j] ;
  }*/
    for (var i = 0; i < votableField.length; i++) {

        jsonData.data[votableField[i]] = voTableData[i];
    }


    /*  console.log(JSON.stringify(jsonData,undefined,2))
      console.log(votableField)
      console.log(voTableData)*/
    return jsonData;
}

/*
const arr = JSON.parse(json);
arr.forEach( obj => renameKey( obj, '_id', 'id' ) );
const updatedJson = JSON.stringify( arr );*/

function renameKey(obj, oldKey, newKey) {
    obj[newKey] = obj[oldKey];
    delete obj[oldKey];
}

function getCorrectOutputJson(json) {
    if (typeof json != 'string') {
        json = JSON.stringify(json, undefined, 2);
    }
    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
        var cls = 'number';
        if (/^"/.test(match)) {
            if (/:$/.test(match)) {
                cls = 'key';
            } else {
                cls = 'string';
            }
        } else if (/true|false/.test(match)) {
            cls = 'boolean';
        } else if (/null/.test(match)) {
            cls = 'null';
        }
        return '<span class="' + cls + '">' + match + '</span>';
    });


}

function genererDataTable(Field, dataTable) {//zone 3 except textarea class = 'white_content'

    var out1 = "<table class='table table-bordered table-striped table-sm' cellspacing='0' width='100%' id='dtBasicExample'>"
    out1 += "<thead><tr role='row'>";//head
//out +="<th/>";
    var nb = Field.length;
    for (var j = 0; j < nb; j++) {
        out1 += "<th rowspan='1' class='th-sm'  colspan='1' style='text-align:center;vertical-align:bottom'>" + Field[j] + "&nbsp&nbsp</th>";
    }
    out1 += "</tr></thead>";
    out1 += "<tbody>";
    var column = 0;
    for (var j = 0; j < dataTable.length; j++) {//table  content
        if (column == 0) {
            var judge = (j + nb) / nb;
            if (judge % 2 == 1) {
                out1 += "<tr>";
                //out+="<td><input type='checkbox'></td>";
            } else {
                out1 += "<tr>";
                //out+="<td><input type='checkbox'></td>";
            }
            out1 += "<td id = '" + dataTable[j] + "' >" + dataTable[j] + "</td>";

        } else {
            out1 += "<td >" + dataTable[j] + "</td>";
        }
        column = column + 1;
        if (column == nb) {
            out1 += "</tr>";
            column = 0;
        }
    }
    out1 += "</tbody>";
    out1 += "</table></div></td></tr>";
    return out1;
}


function selectTableToJoin_html(tableContentJoinTable) {
    var out = '<div class="card" id ="">' +
        '<div class="card-body">' +
        '<div class="row">' +
        '<div class="col-lg-6">' +
        ' <div class="form-group">' +
        '<label for="selectToJoin">Select Table To Join &nbsp &nbsp &nbsp' +
        '</label>' +
        '<select class="form-control" id="selectToJoin">' +
        '<option seleted>...</option>'
    for (var i = 0; i < tableContentJoinTable.length; i++) {

        out += "<option id='" + i + "'>" + tableContentJoinTable[i] + "</option>"
    }
    out += '</select>' +
        '</div>' + '</div>' + '</div>' +
        '<hr class="btn-primary">' +
        '<div> ' +
        '<textarea class="form-control" id="txtAreaAdql" value=""></textArea><br>' +
        '</div>' +
        '<button class="btn btn-success" id="executeAdql">Run Adql</button>'
    '</div>' + '</div>'


    return out;
}


$("#simbadService").click(function () {
    // var adql = "SELECT TOP 1* FROM \"public\".basic"
    if (a.testConnection == false) {
        params.tapService = "http://simbad.u-strasbg.fr/simbad/sim-tap/sync"
        params.schema = Simbadschema;
        params.table = "basic";
        params.shortName = "Simbad";
        display(params.shortName + " is now initialised click now to connect button to connect service", "getStatu")
    } else {
        display("another service is currently connected ! Disconnect the service an try again", 'getStatu')
    }

});
$("#gavoService").click(function () {
    //var adql = "SELECT TOP 1* FROM rr.resource "
    if (a.testConnection == false) {
        params.tapService = "http://dc.zah.uni-heidelberg.de/tap/sync"
        params.schema = "rr";
        params.table = "resource";
        params.shortName = "Gavo";
        display(params.shortName + " is now initialised click now to connect button to connect service", "getStatu")
    } else {
        display("another service is currently connected ! Disconnect the service an try again", "getStatu")
    }
});
$("#caomService").click(function () {
    //var adql = "SELECT  TOP 1 dbo.CaomObservation.* FROM dbo.CaomObservation"
    if (a.testConnection == false) {
        params.tapService = "http://vao.stsci.edu/CAOMTAP/tapservice.aspx/sync"
        params.schema = "dbo";
        params.table = "CaomObservation";
        params.shortName = "CAOM";
        display(params.shortName + " is now initialised click now to connect button to connect service", "getStatu")
    } else {
        display("another service is currently connected ! Disconnect the service an try again", "getStatu")
    }
});
$("#xmmService").click(function () {
    if (a.testConnection == false) {
        params.tapService = "http://xcatdb.unistra.fr/3xmmdr8/tap/sync"
        params.schema = "EPIC";
        params.table = "EPIC_IMAGE";
        params.shortName = "3XMM";
        //var adql = "SELECT  TOP 1  * FROM EPIC.EPIC_IMAGE "
        display(params.shortName + " is now initialised click now to connect button to connect service", "getStatu")
    } else {
        display("another service is currently connected ! Disconnect the service an try again", "getStatu")
    }
});
$("#vizierService").click(function () {
    if (a.testConnection == false) {
        params.tapService = "http://tapvizier.u-strasbg.fr/TAPVizieR/tap/sync"
        params.schema = "metaviz";
        params.table = "METAcat";
        params.shortName = "Vizier";
        //var adql = "SELECT  TOP 100  * FROM metaviz.METAcat"
        display(params.shortName + " is now initialised click now to connect button to connect service", "getStatu")
    } else {
        display("another service is currently connected ! Disconnect the service an try again", "getStatu")
    }

});


888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
class TapApi {

    constructor() {
        this.tapService = '';
        let jsonStatu = {success: {}, faillure: {}};
        this.disconnectJsonStatu = {success: {}, faillure: {}}
        this.testConnection = false;
        this.testDeconnection = false;
        this.correctService = "";
        this.votableQueryResult = "";
        this.query = ""
        this.handlerAttribut = ''//new HandlerAttributs();

        this.tapButton = undefined;
        this.adqlContent = [];
        this.jsonAdqlContent = {
            'rootQuery': "",
            "constraint": {},
            'allJoin': {},
            'allCondition': {},
            "status": {"status": "", 'orderErros': ""}
        }
        this.testJoinConstraint = false;
        this.connector = {status: "", message: "", service: {}}
        this.jsonContaintJoinTable = {
            Succes: {
                status: "",
                base_table: "",
                joined_tables: []
            },
            Failure: {
                NotConnected: {status: "", message: ""},
                WrongTable: {status: "", message: ""}
            }
        }
        this.attributsHandler = new HandlerAttributs();
        this.attributsHandler.api = this;
        this.tapJoinConstraint = [];
        this.tapWhereConstraint = [];
        this.jsonCorrectTableColumnDescription = {"addAllColumn": {}};

        /**
         * @param votableQueryResult (Object) The return value of tabService.Query(query)
         * @return jsonStatu (Json Object) Return Json containning the status of adql query
         * */
        let isCorrectJsonStatu = function (votableQueryResult) {
            if (votableQueryResult.statusText == "OK") {
                jsonStatu.success["status"] = "OK";
            } else {
                jsonStatu.faillure["status"] = "failled";
                jsonStatu.faillure["message"] = "Bad Request";
            }
            return jsonStatu;
        }

        /**
         * @param votableQueryResult : (Object) The return value of tabService.Query(query)
         * @return jsonStatu : (String) The statuText of votableQueryResult
         * */
        this.getJsonStatu = function (votableQueryResult) {
            var jsonStatu = isCorrectJsonStatu(votableQueryResult)
            return jsonStatu;
        }

    }


}

/**
 * Private variable for my classe
 * */
let testRoot = false;
let testButton = false;
let tab = []
let tabContaninBtnRemoveConstraint = [];
let HtmltabContaninBtnRemoveConstraint = [];
let tempTab = [];

//for add AHS to handlerJson after runing query

let testSecondJson = false;
let jsonContaintHandlersValue1 = []
let dataTable1 = [];
// for method getRootField

let rootFields = []
var testLoadRootField = false;

// for getrootQuery
var testGetObjectMap = false;
var jsonAll

// for getObjectWhith all description
var testLoadObjectMapWithAllDesc = false;
let getObjectMapWithAllDescription

var testApiRooQuery = false;
let api = "";
let table = []

let isloadRootQuery = false;
let votableQueryResult = ""

/**
 * @param params (Json) with parameters (tapService,schema,table,shortName)
 * @param tapService (String) The URL of the Tap Servie
 * @param schema (String) Schema containing the complex object
 * @param table (String) Root table of the complex object
 * @param shortName (String) The Shortname of database
 * */
TapApi.prototype.connect = function ({tapService, schema, table, shortName}) {
    var formatTableName = schema + "." + table;

    //alert(formatTableName);
    var correctTableNameFormat = formatTableName.quotedTableName().qualifiedName;
    this.query = "SELECT TOP 5 * FROM " + correctTableNameFormat;
    //this.correctService.tapService = new TapService(tapService, schema, shortName, true)
    this.correctService = new TapServiceConnector(tapService, schema, shortName);
    this.votableQueryResult = this.correctService.Query(this.query);
    this.correctService.api = this;
    this.handlerAttribut.api = this.correctService.api;
    this.handlerAttribut = this.correctService;

    if (this.getJsonStatu(this.votableQueryResult).success.status == 'OK') {
        this.testConnection = true;
        this.connector.status = 'OK';
        this.connector.service["tapService"] = tapService;
        this.connector.service["schema"] = schema;
        this.connector.service["table"] = table;
        this.connector.service["shortName"] = shortName;
        this.connector.message = "Active TAP : " + shortName


        /* for vizier because somme error found */

    } else if (this.getJsonStatu(this.votableQueryResult) != undefined && shortName == "Vizier") {
        this.testConnection = true;
        this.connector.status = 'OK';
        this.connector.service["tapService"] = tapService;
        this.connector.service["schema"] = schema;
        this.connector.service["table"] = table;
        this.connector.service["shortName"] = shortName;
        this.connector.message = "Active TAP : " + shortName
    } else {
        this.testConnection = false

        this.connector.status = 'Failled';
        this.connector.message = "No active TAP connection"
        console.log(JSON.stringify(this.getJsonStatu(this.votableQueryResult).faillure, undefined, 3));


    }
    return this.correctService;
}


TapApi.prototype.disconnect = function () {
    //alert("disconnected")
    this.tapService = null;
    this.correctService = null;
    this.votableQueryResult = null;
    this.tapJoinConstraint = [];
    this.tapWhereConstraint = [];
    this.adqlContent = "";
    this.setConnectionQuery = {"query": {}}
    $("#getJsonAll").text("");

    if (this.correctService == null && this.tapService == null && this.votableQueryResult == null) {
        this.disconnectJsonStatu.success["DisconnectStatus"] = "OK";
        this.testDeconnection = true
        this.testConnection = false

        return this.disconnectJsonStatu.success;
    } else {
        this.disconnectJsonStatu.faillure["faillure"] = "failled";
        this.disconnectJsonStatu.faillure["message"] = "disconnecting failled";
        this.testDeconnection = false;
        this.testDeconnection = true;
        return this.disconnectJsonStatu.faillure;
    }
    //console.log(JSON.stringify(this.disconnectJsonStatu,undefined,2))


}

TapApi.prototype.getConnector = function () {
    if (this.testConnection == true) {
        return this.connector;
    } else {
        // alert("No Tap service connected");
    }
}

TapApi.prototype.getObjectMap = function () {
    var objectMap = {
        succes: {status: "", object_map: {}},
        failure: {status: "", message: ""}
    }
    if (this.testConnection == true) {

        objectMap.succes.status = "OK"
        objectMap.succes.object_map = this.getObjectMapWithAllDescriptions();
        return objectMap;
    } else {
        objectMap.failure.status = "Failed"
        objectMap.failure.message = "No active TAP connection";
        return objectMap
    }

    //console.log(JSON.stringify(objectMap,undefined,3));
    // return objectMap;
}
/**
 * @param baseTable (string): Table from which joint table are searched
 * */
TapApi.prototype.getJoinedTables = function (baseTable) {


    if (this.testConnection == true) {
        this.jsonContaintJoinTable.Succes.status = "OK";
        this.jsonContaintJoinTable.Succes.base_table = baseTable;
        this.jsonContaintJoinTable.Succes.joined_tables = this.handlerAttribut.objectMapWithAllDescription.map[baseTable].join_tables//this.correctService.getJoinTables(baseTable);
        ;
    } else {
        this.jsonContaintJoinTable.Failure.NotConnected.status = "Failed";
        this.jsonContaintJoinTable.Failure.NotConnected.message = "No active TAP connection";
        this.jsonContaintJoinTable.Failure.WrongTable.status = "Failed";
        this.jsonContaintJoinTable.Failure.WrongTable.message = "table " + baseTable + " is not part of the object map"
    }

    return this.jsonContaintJoinTable;
}


/**
 *
 * @param {*} mainJsonData the main json create by the method createMainJson of Tapservice
 * @returns return all join request of each join table of the mainJson
 */
TapApi.prototype.getRootFields = function () {

    let jsonContaintRootFields = {
        succes: {status: "", field_values: []},
        failure: {
            notConnected: {status: "", message: ""},
            otherError: {status: "", message: ""}
        }
    }

    // let rootFields = [];
    if (this.testConnection === true) {
        //
        // alert(this.jsonAdqlContent.rootQuery);
        //let votableQueryResult = ""//this.tapService.Query(this.getRootQuery());
        if (isloadRootQuery == false) {
            votableQueryResult = this.correctService.Query(this.getRootQuery());
            isloadRootQuery = true;
        }
        let contentText = votableQueryResult.responseText;
        if (this.getConnector().service.tapService === "http://simbad.u-strasbg.fr/simbad/sim-tap/sync" || this.getConnector().service.tapService === "http://dc.zah.uni-heidelberg.de/tap/sync") {

            rootFields = VOTableTools.getField(votableQueryResult);
        } else {
            rootFields = VOTableTools.genererField(votableQueryResult, contentText);
        }
        jsonContaintRootFields.succes.status = "OK"
        jsonContaintRootFields.succes.field_values = rootFields;
        return jsonContaintRootFields.succes;
    } else {

        jsonContaintRootFields.failure.notConnected.status = "Failed";
        jsonContaintRootFields.failure.notConnected.message = "No active TAP connection"
        jsonContaintRootFields.failure.otherError.status = "failed"
        jsonContaintRootFields.failure.otherError.message = "error_message"

        return jsonContaintRootFields.failure
        // alert('you are not connected');
    }


}


TapApi.prototype.getRootFieldValues = function (query) {
    let jsonContaintRootFieldValues = {
        succes: {status: "", field_values: []},
        datatable : [],
        field : [],
        failure: {
            notConnected: {status: "", message: ""},
            otherError: {status: "", message: ""}
        }
    }

    let doubleArrayValue = [];
    let singleArrayValue = [];
    if (this.testConnection == true) {
        let Field =[]// this.getRootFields().field_values;
        this.votableQueryResult = this.correctService.Query(query);
        let rootable = this.connector.service["table"];
        let schema = this.connector.service["schema"];
        ;
        let dataTable = VOTableTools.votable2Rows(this.votableQueryResult);
        let tableName = this.getConnector().service["table"];
        jsonContaintRootFieldValues.datatable=dataTable;
        let votableQueryResult="";
        if(query!==undefined) {
            votableQueryResult = this.correctService.Query(query);
        }
        let contentText = votableQueryResult.responseText;

            if (this.getConnector().service.tapService === "http://simbad.u-strasbg.fr/simbad/sim-tap/sync" || this.getConnector().service.tapService === "http://dc.zah.uni-heidelberg.de/tap/sync") {

                Field = VOTableTools.getField(votableQueryResult);
            } else {
                Field = VOTableTools.genererField(votableQueryResult, contentText);
            }

        jsonContaintRootFieldValues.field=Field
        //////////////////////////////////////////

        let nbCols = Field.length;
        if (dataTable[dataTable.length - 1] == 0) {
          //  dataTable.splice(dataTable.length - 1, 1);
        }
        for (let rowNb = 0; rowNb < dataTable.length; rowNb += nbCols) {//table  content
            for (let col = 0; col < nbCols; col++) {
                if (dataTable[rowNb + col] != null)
                    singleArrayValue.push(dataTable[rowNb + col]);
            }
            doubleArrayValue.push(singleArrayValue);
            singleArrayValue = [];
        }
        /////////////////////////////BEGIN PART TO CREATE TABLE CONTENT AHS AFTER RUNING ROOT QUERY TO PU IN THE MAP/////////////////////////////

        if (testSecondJson == false) {
            dataTable1 = this.attributsHandler.getTableAttributeHandler(rootable, schema)// VOTableTools.votable2Rows(adql1);
            testSecondJson = true;
        }
        for (let b = 0; b < dataTable1.attribute_handlers.length; b++) {
            for (let ke in dataTable1.attribute_handlers[b]) {
                console.log(ke +"-----------------");
                for (let col = 0; col < Field.length; col++) {
                    if (dataTable1.attribute_handlers[b][ke] === Field[col]) {
                        jsonContaintHandlersValue1.push(dataTable1.attribute_handlers[b])
                        jsonContaintHandlersValue1 = Array.from(new Set(jsonContaintHandlersValue1));

                    } else {

                    }
                }
            }
        }
        jsonContaintHandlersValue1 = Array.from(new Set(jsonContaintHandlersValue1));
        this.handlerAttribut.objectMapWithAllDescription.map['handler_attributs'] = jsonContaintHandlersValue1;

        ////////////////////////////////////END PART TO CREATE TABLE CONTENT AHS AFTER RUNING ROOT QUERY TO PU IN THE MAP////////////////////////

        jsonContaintRootFieldValues.succes.status = "OK"
        jsonContaintRootFieldValues.succes.field_values = doubleArrayValue;

    } else {

        jsonContaintRootFieldValues.failure.notConnected.status = "Failed";
        jsonContaintRootFieldValues.failure.notConnected.message = "No active TAP connection"
        jsonContaintRootFieldValues.failure.otherError.status = "failed"
        jsonContaintRootFieldValues.failure.otherError.message = "error_message"

    }
    return jsonContaintRootFieldValues;
}

// private function  to modify key
function modifyKeys(obj) {
    Object.keys(obj).forEach(key => {
        obj[`${obj[key].column_name}`] = obj[key];
        delete obj[key];
        if (typeof obj[`${obj[key].column_name}`] === "object") {
            modifyKeys(obj[`${obj[key].column_name}`]);
        }
    });
}

TapApi.prototype.getRootQueryIds = function () {
    let jsonContaintRootQueryIdsValues = {
        succes: {status: "", field_ids: []},
        failure: {
            notConnected: {status: "", message: ""},
            otherError: {status: "", message: ""}
        }
    }
    let doubleArrayValue = [];
    let singleArrayValue = [];
    if (this.testConnection == true) {
        let Field = this.getRootFields().field_values;
        this.votableQueryResult = this.correctService.Query(this.getRootQuery());
        let rootable = this.connector.service["table"];
        let schema = this.connector.service["schema"];
        let dataTable = []
        if (this.votableQueryResult.statusText == "OK") {
            dataTable = VOTableTools.votable2Rows(this.votableQueryResult);
            let tableName = this.getConnector().service["table"];

            let nbCols = Field.length;
            if (dataTable[dataTable.length - 1] == 0) {
                dataTable.splice(dataTable.length - 1, 1);
            }
            for (let rowNb = 0; rowNb < dataTable.length; rowNb += nbCols) {//table  content
                for (let col = 0; col < nbCols; col++) {
                    if (dataTable[rowNb + col] != null)
                        singleArrayValue.push(dataTable[rowNb + col]);
                }
                doubleArrayValue.push(singleArrayValue);
                singleArrayValue = [];
            }
            //var query = "SELECT TOP 60 \"public\".basic.oid   FROM  \"public\".basic  JOIN   \"public\".otypes ON  \"public\".basic.oid= \"public\".otypes.oidref";
            jsonContaintRootQueryIdsValues.succes.status = "OK"
            jsonContaintRootQueryIdsValues.succes.field_ids = doubleArrayValue;

        } else {

            jsonContaintRootQueryIdsValues.failure.notConnected.status = "Failed";
            jsonContaintRootQueryIdsValues.failure.notConnected.message = "No active TAP connection"
            jsonContaintRootQueryIdsValues.failure.otherError.status = "failed"
            jsonContaintRootQueryIdsValues.failure.otherError.message = "error_message"
        }
    }
    return jsonContaintRootQueryIdsValues;
}

TapApi.prototype.getRootQuery = function () {
       let rootTable = this.getConnector().service["table"];
    //let rootTable = this.getConnector().service["table"]// .jsonContaintJoinTable.Succes.base_table;
    // jsonAll = this.getObjectMap().succes.object_map;
    let schema;
    let contentAdql = "";
    let textJoinConstraint = "";
    let objectMap = this.getObjectMap().succes.object_map //this.tapService.getObjectMapAndConstraint(jsonAll,rootTable);
    let map = objectMap.map
    for (var keyRoot in map) {//jou
        // console.log(keyRoot + '  ' + rootTable)
        if (keyRoot == rootTable){
            schema = this.connector.service["schema"];
            schema = schema.quotedTableName().qualifiedName;
            for (var key in map[rootTable].join_tables) {
                let formatTableName = schema + "." + rootTable;
                let formatJoinTable = schema + "." + key;
                let correctJoinFormaTable = formatJoinTable.quotedTableName().qualifiedName
                let correctTableNameFormat = formatTableName.quotedTableName().qualifiedName;

                contentAdql = "SELECT DISTINCT TOP 60 " + correctTableNameFormat + "." + map[rootTable].join_tables[key].target;
                contentAdql += '\n' + " FROM  " + correctTableNameFormat;
                this.jsonAdqlContent.rootQuery = contentAdql;
                textJoinConstraint = " JOIN  " + correctJoinFormaTable + " ";
                textJoinConstraint += "ON " + correctTableNameFormat + "." + map[rootTable].join_tables[key].target;
                textJoinConstraint += "=" + correctJoinFormaTable + "." + map[rootTable].join_tables[key].from;
                this.jsonAdqlContent.constraint[correctJoinFormaTable] = textJoinConstraint
                //this.tapJoinConstraint.push([key, textJoinConstraint]);
                textJoinConstraint = "";
                let json2 = map[rootTable].join_tables[key]
                if (json2.join_tables !== undefined) {
                    for (let f in json2.join_tables) {
                        let firstJoin = this.jsonAdqlContent.constraint[correctJoinFormaTable]
                        let secondformatJoinTable = schema + "." + f;
                        let secondcorrectJoinFormaTable = secondformatJoinTable.quotedTableName().qualifiedName
                        textJoinConstraint = " JOIN  " + secondformatJoinTable + " ";
                        textJoinConstraint += "ON " + correctJoinFormaTable + "." + json2.join_tables[f].target;
                        textJoinConstraint += "=" + secondformatJoinTable + "." + json2.join_tables[f].from;
                        this.jsonAdqlContent.constraint["condition " + secondformatJoinTable] = ""
                        this.jsonAdqlContent.constraint[secondformatJoinTable] = firstJoin + " " + textJoinConstraint
                        for (let c in json2.join_tables[f]) {
                            let json3 = json2.join_tables[f].join_tables
                            if (json3 !== undefined) {
                                for (let c1 in json3) {
                                    let secondJoin = this.jsonAdqlContent.constraint[secondformatJoinTable]
                                    let thirdformatJoinTable = schema + "." + c1;
                                    let thirdcorrectJoinFormaTable = thirdformatJoinTable.quotedTableName().qualifiedName
                                    textJoinConstraint = " JOIN  " + thirdformatJoinTable + " ";
                                    textJoinConstraint += "ON " + secondcorrectJoinFormaTable + "." + json3[c1].target;
                                    textJoinConstraint += "=" + thirdformatJoinTable + "." + json3[c1].from;
                                    this.jsonAdqlContent.constraint["condition " + thirdformatJoinTable] = ""
                                    this.jsonAdqlContent.constraint[thirdformatJoinTable] = secondJoin + " " + textJoinConstraint
                                }
                            }
                        }
                    }
                }
                this.jsonAdqlContent.constraint["condition " + correctJoinFormaTable] = " " + schema + "." + key + "." + map[keyRoot].join_tables[key].from + "=" + "";
            }
        }
    }
    for (let key in this.jsonAdqlContent.allJoin) {
        if (this.jsonAdqlContent.rootQuery.indexOf(this.jsonAdqlContent.allJoin[key]) !== -1) {
        } else {
            this.jsonAdqlContent.rootQuery += '\n' + this.jsonAdqlContent.allJoin[key];
        }
    }
    this.addConstraint();
    return this.jsonAdqlContent.rootQuery;
}

TapApi.prototype.addConstraint = function () {
    this.jsonAdqlContent = this.correctService.createCorrectJoin(this);
    let objectMapWithAllDescription = this.getObjectMap().succes.object_map;
    /**
     * Search a good place to put where and AND close to adql query
     * */
    for (let keyconst in objectMapWithAllDescription.tables) {
        if (this.jsonAdqlContent.rootQuery.indexOf("WHERE") === -1) {
            //jsonAdqlContent.rootQuery=jsonAdqlContent.rootQuery+" WHERE "
            if (objectMapWithAllDescription.tables[keyconst].constraints.length === 0) {

            } else {
                this.jsonAdqlContent.rootQuery += '\n' + " WHERE " + objectMapWithAllDescription.tables[keyconst].constraints + ' ';
            }
        } else {
            if (this.jsonAdqlContent.rootQuery.indexOf(objectMapWithAllDescription.tables[keyconst].constraints) !== -1) {

            } else {
                this.jsonAdqlContent.rootQuery += '\n' + " AND " + objectMapWithAllDescription.tables[keyconst].constraints;
            }
        }
    }
    /**
     * if you remouve a constrain we verified that there is not a duplication of WHERE OR AND condition
     * */

    this.jsonAdqlContent.rootQuery = this.correctService.replaceWhereAnd(this.jsonAdqlContent.rootQuery);

    /**
     * when we are removing all constraint, we verified if rootQuery end with WHERE close.
     * if so, we remove the WHERE close to rootQuery
     * */
    if (this.jsonAdqlContent.rootQuery.trim().endsWith("WHERE") == true) {
        this.jsonAdqlContent.rootQuery = this.jsonAdqlContent.rootQuery.trim().replaceAll("WHERE", "");
    }
}


/**
 *@param{*} str : String the root query
 * @param{*} find : String the short string you search in the root query
 * @param{*} replace : String the replace value of the search element
 **/
function replaceAll(str, find, replace) {
    var escapedFind = find.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
    return str.replace(new RegExp(escapedFind, 'g'), replace);
}
/**
 *@param{*} table : String the name of table you want to remove the contraint associeted with
 * @return{*} : Json the json containing root Query with all join table and all condition of each table
 **/
TapApi.prototype.resetTableConstraint = function (table) {
    ;
    var schema = this.connector.service["schema"];
    var formatTableName = schema + "." + table;

    var correctTableNameFormat = formatTableName.quotedTableName().qualifiedName;
    for (let key in this.getObjectMap().succes.object_map.tables) {
        if (key == table) {
            this.getObjectMap().succes.object_map.tables[key].constraints = ""//= "";
            delete this.jsonAdqlContent.allJoin[correctTableNameFormat];
            delete this.jsonAdqlContent.allCondition[correctTableNameFormat];
            this.jsonAdqlContent.status.status = "OK";
        } else {
            this.jsonAdqlContent.status.status = "Failed";
        }
    }
    return this.jsonAdqlContent;
}

/**
 *@param{*} table : String the name of table you want to remove the contraint associeted with
 * @return{*} : Json the json containing root Query with all join table and all condition of each table
 **/
TapApi.prototype.resetAll = function () {
    for (let key in this.getObjectMapWithAllDescriptions().tables) {
        this.resetTableConstraint(key);
        this.jsonAdqlContent.status.status = "OK";
    }
    return this.jsonAdqlContent;
}

/**
 * @param {*} table : String the name of table you want get handlerAttribut associeted with
 * @return{*} : Json the json containing all handler Attribut of the table
 * */
TapApi.prototype.getTableAttributeHandlers = function (table) {
    return this.attributsHandler.getTableAttributeHandler(table);
}
/**
 *@return{*} : Json the json containing all detail about every singel table join to the root table with all join table of each table and all condition of each table
 **/

TapApi.prototype.getObjectMapWithAllDescriptions = function () {
    getObjectMapWithAllDescription = this.handlerAttribut.getObjectMapAndConstraints();
    return getObjectMapWithAllDescription;
}
TapApi.prototype.setConnector = function (rootTable, constraint) {
    let adql = ''
    let root = this.getConnector().service["table"]
    let schema;
    let objectMap = this.getObjectMap().succes.object_map
    let map = objectMap.map[root].join_tables
    schema = this.connector.service["schema"];
    schema = schema.quotedTableName().qualifiedName;
    if(constraint!=="" || constraint!==undefined){
        for (var keyRoot in map) {//jou
            if (keyRoot === rootTable) {
                let formatTableName = schema + "." + keyRoot;
                let correctTableNameFormat = formatTableName.quotedTableName().qualifiedName;
                adql = "SELECT DISTINCT TOP 60 " + correctTableNameFormat + "." + map[keyRoot].from;
                adql += '\n' + " FROM  " + correctTableNameFormat;
                adql += '\n' + " WHERE  " + correctTableNameFormat + "." + map[keyRoot].from + " = " + constraint;
                console.log(adql);
                return adql;
            }
            if (keyRoot !== rootTable) {
                let formatTableName = schema + "." + keyRoot;
                let correctTableNameFormat = formatTableName.quotedTableName().qualifiedName;
                for (let ke in map[keyRoot]) {
                    //console.log(ke)
                    if (ke === "join_tables") {
                        for (let k in map[keyRoot][ke]) {
                            //console.log(k);
                            if (k === rootTable) {
                                // console.log(map[keyRoot][ke])
                                let formatTableName2 = schema + "." + k;
                                let correctTableNameFormat2 = formatTableName2.quotedTableName().qualifiedName;
                                adql = "SELECT DISTINCT TOP 60 " + correctTableNameFormat2 + "." + map[keyRoot][ke][k].from;
                                adql += '\n' + " FROM  " + correctTableNameFormat2;
                                adql += " JOIN " + correctTableNameFormat + " ON " + correctTableNameFormat + "." + map[keyRoot].join_tables[k].target
                                adql += " = " + correctTableNameFormat2 + "." + map[keyRoot][ke][k].from
                                adql += '\n' + " WHERE  " + correctTableNameFormat + "." + map[keyRoot].from + " = " + constraint;
                                return adql;
                            }
                        }
                    }
                }
            }
        }
    }
}

8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
