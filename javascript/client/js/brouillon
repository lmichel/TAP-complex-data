
else if (k !== rootTable) {
                                for (let k in map[keyRoot][ke]) {
                                    //console.log(map[keyRoot][ke][k])
                                    for (let c in map[keyRoot][ke][k]) {
                                        if (c === "join_tables") {
                                            //console.log(map[keyRoot][ke][k][c]);
                                            let lastJson = map[keyRoot][ke][k][c];
                                            for (let lastKey in lastJson) {
                                                if (lastKey === rootTable) {
                                                    let formatTableName2 = schema + "." + lastKey;
                                                    let correctTableNameFormat2 = formatTableName2.quotedTableName().qualifiedName;
                                                    adql = "SELECT DISTINCT TOP 60 " + correctTableNameFormat2 + "." + lastJson[lastKey].from;
                                                    adql += '\n' + " FROM  " + correctTableNameFormat2;
                                                    adql += '\n' + " WHERE  " + correctTableNameFormat2 + "." + lastJson[lastKey].from + " = " + constraint;
                                                    return adql;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
/////////////////////////// api jsonrootvalue ///////////////////////////////////////



TapApi.prototype.getRootFieldValues = function (){
    let jsonContaintRootFieldValues = {
        succes: {status: "", field_values: []},
        failure:{
            notConnected: {status:"", message: ""},
            otherError: {status:"", message: ""}
        }
    }
    let doubleArrayValue = [];
    let singleArrayValue = [];
    if(this.testConnection==true){

        let Field = this.getRootFields().field_values;
        let dataTable = VOTableTools.votable2Rows(this.votableQueryResult);
        let tableName = this.getConnector().service["table"];
        var out1 = "<table class='table table-bordered'>"
        out1 += "<thead><tr role='row' style='text-align:center'>" + tableName;
        +"</thead>"//head
        //out +="<th/>";
        var nbCols = Field.length;
        for (var rowNb = 0; rowNb < nbCols; rowNb++) {
            out1 += "<th rowspan='1' class='th-sm'  colspan='1' style='text-align:center;vertical-align:bottom'>" + Field[rowNb] + "&nbsp&nbsp</th>";
        }
        out1 += "</tr></thead>";
        out1 += "<tbody>";
        if (dataTable[dataTable.length - 1] == 0) {
            dataTable.splice(dataTable.length - 1, 1);
        }
        for (var rowNb = 0; rowNb < dataTable.length; rowNb += nbCols) {//table  content
            if (rowNb % 2) {
                out1 += "<tr>";
            } else {
                out1 += "<tr class = 'even'>";
            }
            for (var col = 0; col < nbCols; col++) {
                out1 += "<td id = '" + dataTable[rowNb + col] + "' >" + dataTable[rowNb + col] + "</td>";
                singleArrayValue.push(dataTable[rowNb + col]);
            }
            doubleArrayValue.push(singleArrayValue);
            singleArrayValue=[];
            out1 += "</tr>";
        }
        out1 += "</tbody>";
        out1 += "</table></div></td></tr>";

        //console.log(doubleArrayValue);

        jsonContaintRootFieldValues.succes.status = "OK"
        jsonContaintRootFieldValues.succes.field_values = doubleArrayValue;

    }else {

        jsonContaintRootFieldValues.failure.notConnected.status="Failed";
        jsonContaintRootFieldValues.failure.notConnected.message="No active TAP connection"
        jsonContaintRootFieldValues.failure.otherError.status = "failed"
        jsonContaintRootFieldValues.failure.otherError.message = "error_message"

        // alert('you are not connected');
    }

    return jsonContaintRootFieldValues;

}
















































class TapApi {

    constructor() {
        this.tapService = '';
        let jsonStatu = {success: {}, faillure: {}};
        this.disconnectJsonStatu = {success: {}, faillure: {}}
        this.testConnection = false;
        this.testDeconnection = false;
        this.correctService = "";
        this.votableQueryResult = "";
        this.query = ""
        this.tapButton = undefined;
        this.adqlContent = undefined
        this.testJoinConstraint = false;
        this.connector = {status: "", message: "", service: {}}
        this.jsonContaintJoinTable = {
            Succes: {
                status: "",
                base_table: "",
                joined_tables: []
            },
            Failure: {
                NotConnected: {status: "", message: ""},
                WrongTable: {status: "", message: ""}
            }
        }

        this.tapJoinConstraint =[];
        this.tapWhereConstraint = [];

        /**
         * @param votableQueryResult (Object) The return value of tabService.Query(query)
         * @return jsonStatu (Json Object) Return Json containning the status of adql query
         * */
        let isCorrectJsonStatu = function (votableQueryResult) {
            if (votableQueryResult.statusText == "OK") {
                jsonStatu.success["status"] = "OK";
            } else {
                jsonStatu.faillure["status"] = "failled";
                jsonStatu.faillure["message"] = "Bad Request";
            }
            return jsonStatu;
        }

        /**
         * @param votableQueryResult : (Object) The return value of tabService.Query(query)
         * @return jsonStatu : (String) The statuText of votableQueryResult
         * */
        this.getJsonStatu = function (votableQueryResult) {
            var jsonStatu = isCorrectJsonStatu(votableQueryResult)
            return jsonStatu;
        }

    }


}

/**
 * @param params (Json) with parameters (tapService,schema,table,shortName)
 * @param tapService (String) The URL of the Tap Servie
 * @param schema (String) Schema containing the complex object
 * @param table (String) Root table of the complex object
 * @param shortName (String) The Shortname of database
 * */
TapApi.prototype.connect = function ({tapService, schema, table, shortName}) {
    var formatTableName = schema + "." + table;
    //alert(formatTableName);
    var correctTableNameFormat = formatTableName.quotedTableName().qualifiedName;
    this.query = "SELECT TOP 5 * FROM " + correctTableNameFormat;
    this.tapService = new TapService(tapService, schema, shortName, true)
    this.correctService = new TapServiceConnector(tapService, schema, shortName);
    this.votableQueryResult = this.tapService.Query(this.query);

    if (this.getJsonStatu(this.votableQueryResult).success.status == "OK") {
        this.testConnection = true;
        this.connector.status = 'OK';
        this.connector.service["tapService"] = tapService;
        this.connector.service["schema"] = schema;
        this.connector.service["table"] = table;
        this.connector.service["shortName"] = shortName;
        this.connector.message = "Active TAP : " + shortName
        //this.adqlContent = "";
        // console.log(JSON.stringify(this.getJsonStatu(this.votableQueryResult),undefined,2))

        //retirer dans l'api
        //var data = this.correctService.loadJson();
        //$("#loadJson").html(JSON.stringify(data,undefined,2));
        //window.location.hash = "#loadJson"

        //var jsonData = correctService.createVoTableResultJson(votableQueryResult,table)
        // $("#votableJson").html(JSON.stringify(jsonData,undefined,2));
        // window.location.hash = "#votableJson"

    } else {
        this.testConnection = false

        this.connector.status = 'Failled';
        this.connector.message = "No active TAP connection"
        console.log(JSON.stringify(this.getJsonStatu(this.votableQueryResult).faillure, undefined, 3));


    }
    return this.correctService;
}


TapApi.prototype.disconnect = function () {
    this.tapService = null;
    this.correctService = null;
    this.votableQueryResult = null;
    this.tapJoinConstraint =[];
    this.tapWhereConstraint = [];
    if (this.correctService == null && this.tapService == null && this.votableQueryResult == null) {
        this.disconnectJsonStatu.success["DisconnectStatus"] = "OK";
        this.testDeconnection = true
        this.testConnection = false
        return this.disconnectJsonStatu.success;
    } else {
        this.disconnectJsonStatu.faillure["faillure"] = "failled";
        this.disconnectJsonStatu.faillure["message"] = "disconnecting failled";
        this.testDeconnection = false;
        this.testDeconnection = true;
        return this.disconnectJsonStatu.faillure;
    }
    //console.log(JSON.stringify(this.disconnectJsonStatu,undefined,2))


}

TapApi.prototype.getConnector = function () {
    if (this.testConnection == true) {
        return this.connector;
    } else {
        alert("No Tap service connected");
    }
}

TapApi.prototype.getObjectMap = function () {
    var objectMap = {
        succes: {status: "", object_map: {}},
        failure: {status: "", message: ""}
    }
    if (this.testConnection == true) {
        objectMap.succes.status = "OK"
        objectMap.succes.object_map = this.correctService.loadJson();
        // return objectMap.succes;
    } else {
        objectMap.failure.status = "Failed"
        objectMap.failure.message = "No active TAP connection";
        //return objectMap.failure
    }

    //console.log(JSON.stringify(objectMap,undefined,3));
    return objectMap;
}
/**
 * @param baseTable (string): Table from which joint table are searched
 * */
TapApi.prototype.getJoinedTables = function (baseTable) {


    if (this.testConnection == true) {
        this.jsonContaintJoinTable.Succes.status = "OK";
        this.jsonContaintJoinTable.Succes.base_table = baseTable;
        this.jsonContaintJoinTable.Succes.joined_tables = this.correctService.getJoinTables(baseTable);
        ;
    } else {
        this.jsonContaintJoinTable.Failure.NotConnected.status = "Failed";
        this.jsonContaintJoinTable.Failure.NotConnected.message = "No active TAP connection";
        this.jsonContaintJoinTable.Failure.WrongTable.status = "Failed";
        this.jsonContaintJoinTable.Failure.WrongTable.message = "table " + baseTable + " is not part of the object map"
    }

    return this.jsonContaintJoinTable;
}


/**
 *
 * @param {*} mainJsonData  the main json create by the method createMainJson of Tapservice
 * @returns return all the field of each join table of the mainJson
 */
TapApi.prototype.getCorrectFieldOfJoinTable = function (mainJsonData) {
    var tableContentQueryField = []
    Object.keys(mainJsonData).forEach(function (key) {
        tableContentQueryField.push(key);
    });
    return tableContentQueryField;
}

/**
 *
 * @param {*} mainJsonData the main json create by the method createMainJson of Tapservice
 * @returns return all join request of each join table of the mainJson
 */
TapApi.prototype.getRootFields = function () {

    let jsonContaintRootFields = {
        succes: {status: "", field_values: []},
        failure: {
            notConnected: {status: "", message: ""},
            otherError: {status: "", message: ""}
        }
    }

    let rootFields = [];
    if (this.testConnection === true) {
        let contentText = this.votableQueryResult.responseText;
        if (this.getConnector().service.tapService === "http://simbad.u-strasbg.fr/simbad/sim-tap/sync" || this.getConnector().service.tapService === "http://dc.zah.uni-heidelberg.de/tap/sync") {
            rootFields = VOTableTools.getField(this.votableQueryResult);
        } else {
            rootFields = VOTableTools.genererField(this.votableQueryResult, contentText);
        }
        jsonContaintRootFields.succes.status = "OK"
        jsonContaintRootFields.succes.field_values = rootFields;
        return jsonContaintRootFields.succes;
    } else {

        jsonContaintRootFields.failure.notConnected.status = "Failed";
        jsonContaintRootFields.failure.notConnected.message = "No active TAP connection"
        jsonContaintRootFields.failure.otherError.status = "failed"
        jsonContaintRootFields.failure.otherError.message = "error_message"

        return jsonContaintRootFields.failure
        // alert('you are not connected');
    }


}

TapApi.prototype.getRootFieldValues = function () {
    let jsonContaintRootFieldValues = {
        succes: {status: "", field_values: []},
        failure: {
            notConnected: {status: "", message: ""},
            otherError: {status: "", message: ""}
        }
    }
    let doubleArrayValue = [];
    let singleArrayValue = [];
    if (this.testConnection == true) {

        let Field = this.getRootFields().field_values;
        let dataTable = VOTableTools.votable2Rows(this.votableQueryResult);
        let tableName = this.getConnector().service["table"];

        let nbCols = Field.length;
        if (dataTable[dataTable.length - 1] == 0) {
            dataTable.splice(dataTable.length - 1, 1);
        }
        for (let rowNb = 0; rowNb < dataTable.length; rowNb += nbCols) {//table  content
            for (let col = 0; col < nbCols; col++) {
                singleArrayValue.push(dataTable[rowNb + col]);
            }
            doubleArrayValue.push(singleArrayValue);
            singleArrayValue = [];
        }
        //console.log(doubleArrayValue);
        jsonContaintRootFieldValues.succes.status = "OK"
        jsonContaintRootFieldValues.succes.field_values = doubleArrayValue;

    } else {

        jsonContaintRootFieldValues.failure.notConnected.status = "Failed";
        jsonContaintRootFieldValues.failure.notConnected.message = "No active TAP connection"
        jsonContaintRootFieldValues.failure.otherError.status = "failed"
        jsonContaintRootFieldValues.failure.otherError.message = "error_message"
        // alert('you are not connected');
    }

    return jsonContaintRootFieldValues;

}

TapApi.prototype.getRootQueryIds = function () {
    let jsonContaintRootQueryIdsValues = {
        succes: {status: "", field_ids: []},
        failure: {
            notConnected: {status: "", message: ""},
            otherError: {status: "", message: ""}
        }
    }
    let doubleArrayValue = [];
    let singleArrayValue = [];
    if (this.testConnection == true) {

        let Field = this.getRootFields().field_values;
        //var query = "SELECT TOP 60 \"public\".basic.oid   FROM  \"public\".basic  JOIN   \"public\".otypes ON  \"public\".basic.oid= \"public\".otypes.oidref";
        var query = $("#getJsonAll").text();
        var a = "\\"
        let votableQueryResult
        //alert(query.substr(1))
        if (query.startsWith("SELECT TOP 60")) {
            //console.log(this.getRootQuery())
            //alert("dddddddddddd")
            votableQueryResult  = this.tapService.Query(query);
        } else {
            //alert(query);
            // votableQueryResult = this.tapService.Query(query)


            votableQueryResult = this.tapService.Query(this.getRootQuery());
            this.tapButton=[];

        }
        if (votableQueryResult.statusText == "OK") {
            let dataTable = VOTableTools.votable2Rows(votableQueryResult);
            //let tableName = this.getConnector().service["table"];

            let nbCols = Field.length;
            // alert(nbCols);
            if (dataTable[dataTable.length - 1] == 0) {
                dataTable.splice(dataTable.length - 1, 1);
            }
            for (let rowNb = 0; rowNb < dataTable.length; rowNb += nbCols) {//table  content
                for (let col = 0; col < nbCols; col++) {
                    singleArrayValue.push(dataTable[col]);
                }
                doubleArrayValue.push(singleArrayValue);
                singleArrayValue = [];
            }
            //console.log(doubleArrayValue);
            jsonContaintRootQueryIdsValues.succes.status = "OK"
            jsonContaintRootQueryIdsValues.succes.field_ids = doubleArrayValue;

        } else {

            jsonContaintRootQueryIdsValues.failure.notConnected.status = "Failed";
            jsonContaintRootQueryIdsValues.failure.notConnected.message = "No active TAP connection"
            jsonContaintRootQueryIdsValues.failure.otherError.status = "failed"
            jsonContaintRootQueryIdsValues.failure.otherError.message = "error_message"
            // alert('you are not connected');
        }
    }

    return jsonContaintRootQueryIdsValues;

}

TapApi.prototype.getRootQuery = function () {
    var rootTable = this.connector.service["table"]// .jsonContaintJoinTable.Succes.base_table;
    var jsonAll = this.getObjectMap();
    var schema;
    var contentAdql = "";
    let listJoinAndId = this.getListJoinAndId(this.getConnector().service['table'], this.getObjectMap().succes.object_map);
    let listId = this.getListeId(listJoinAndId)
    // console.log(this.getJoinedTables())
    // console.log(rootTable)

    var dataTable = VOTableTools.votable2Rows(this.votableQueryResult);
    var joinIdDic = {};
    /**
     * @TODO JUSTE POUR BESOIN DE DEVELLOPEMENT
     */
    /* const VizierUrl = "http://tapvizier.u-strasbg.fr/TAPVizieR/tap/sync";
     const XmmUrl = "http://xcatdb.unistra.fr/3xmmdr8/tap/sync";
     var jsonQuerySchema = {
         url : this.url,
         rootTable :root,
         withSchema :VizierUrl||XmmUrl? false:true
     }*/
    for (var i = 0; i < listJoinAndId.length; i = i + 2) {
        if (!json2Requete.isString(listJoinAndId[i])) {
            joinIdDic[listJoinAndId[i + 1]] = listJoinAndId[i][0];
        }
        else {
            joinIdDic[listJoinAndId[i + 1]] = listJoinAndId[i];
        }
    }
    var i=0;
    var textJoinConstraint = "";
    var textWhereConstraint ="";
    for (var keyRoot in jsonAll.succes.object_map) {
        if (keyRoot == rootTable) {

            console.log(keyRoot+" "+rootTable );
            schema = jsonAll.succes.object_map[keyRoot].schema;

            schema = schema.quotedTableName().qualifiedName;

            //var m = 0;
            for (var key in jsonAll.succes.object_map[keyRoot].join_tables) {

                var formatTableName = schema + "." + keyRoot;
                var formatJoinTable = schema+"."+key;
                var correctJoinFormaTable = formatJoinTable.quotedTableName().qualifiedName
                //alert(formatTableName);
                var correctTableNameFormat = formatTableName.quotedTableName().qualifiedName;
                //var schemaPrefix = "";
                //schemaPrefix = schema.quotedTableName().qualifiedName ;
                // console.log(schemaPrefix);
                // alert(correctTableNameFormat);
                //var temp1=[],temp2=[];
                contentAdql = "SELECT TOP 60 "+ correctTableNameFormat + "." + jsonAll.succes.object_map[keyRoot].join_tables[key].target ;
                contentAdql += " FROM  " + correctTableNameFormat;
                textJoinConstraint = " JOIN  " + correctJoinFormaTable + " ";
                //temp1.push(key);

                textJoinConstraint += "ON " + correctTableNameFormat+ "." + jsonAll.succes.object_map[keyRoot].join_tables[key].target;
                textJoinConstraint += "=" + correctJoinFormaTable + "." + jsonAll.succes.object_map[keyRoot].join_tables[key].from;

                this.tapJoinConstraint.push([key,textJoinConstraint]);
                textJoinConstraint="";

                let votableFields = this.getRootFields().field_values;

                ////console.log(k+"  iddic "+votableField[k]+" "+joinIdDic[key]+" "+dataTable[k])
                var k=0;
                for(j=0;j<votableFields.length;j++){
                    //  console.log(votableField[j]+" =>  "+joinIdDic[key])
                    if(votableFields[j]==joinIdDic[key]){
                        k=j;
                        //alert(votableField[j]+" "+joinIdDic[key])
                        // break
                    }

                }

                if (schema.indexOf("public") != -1 && contentAdql.indexOf("oid") != -1) {
                    textWhereConstraint = " WHERE " + jsonAll.succes.object_map[keyRoot].join_tables[key].from + "=" + dataTable[k];
                    this.tapWhereConstraint.push(textWhereConstraint);
                }
                else if (schema.indexOf("rr") != -1 && contentAdql.indexOf("ivoid=") == -1) {
                    //alert(schema+'.'+key+'.'+jsonAll.succes.object_map[keyRoot].join_tables[key].from );
                    textWhereConstraint = " WHERE " + schema+'.'+key+'.'+jsonAll.succes.object_map[keyRoot].join_tables[key].from + "=" + "\'" + dataTable[k] + "\'";
                    this.tapWhereConstraint.push(textWhereConstraint);
                }
                else if (schema.indexOf("public") != -1 && contentAdql.indexOf("oid") == -1) {
                    if (json2Requete.isString(dataTable[k])) {
                        textWhereConstraint += " WHERE " + schema + "." + key + "." + jsonAll.succes.object_map[keyRoot].join_tables[key].from + "=" + "\'" + dataTable[k] + "\'";
                        this.tapWhereConstraint.push(textWhereConstraint);
                    }
                    else {
                        textWhereConstraint = " WHERE " + schema + "." + key + "." + jsonAll.succes.object_map[keyRoot].join_tables[key].from + "=" + dataTable[k];
                        this.tapWhereConstraint.push(textWhereConstraint);
                    }
                }
                else {
                    textWhereConstraint = " WHERE " + schema + "." + key + "." + jsonAll.succes.object_map[keyRoot].join_tables[key].from + "=" + "\'" + dataTable[k] + "\'";
                    this.tapWhereConstraint.push(textWhereConstraint);
                }

                //contentTable[dataTable[k]] = contentAdql;break;
                //break;

            }



            if(this.tapJoinConstraint.length==0){
                return  contentAdql;
            }else {
                if(this.testJoinConstraint == false){
                    for(let k =0; k<this.tapJoinConstraint.length;k++) {

                        if (k < 1) {
                            // contentAdql +=" "+ this.tapJoinConstraint[k][1] + "  ";

                        }

                        this.testJoinConstraint =true;
                        //   break;

                    }

                }
                // console.log(this.tapJoinConstraint[5][0])

                // alert('fffffffffffff')

                his.adqlContent = addConstraint(contentAdql,this.tapJoinConstraint,this.tapWhereConstraint);
                if(testRoot==false){
                    this.adqlContent =true;
                    return contentAdql;
                }else{
                    return this.adqlContent;
                }

            }

            //console.log(this.tapJoinConstraint);
            // console.log(this.tapWhereConstraint);
            // return contentAdql;
        }
    }


}
var testRoot = false;
testButton = false;

addConstraint=function(rootQuery,table,whereTable){
    var buttons="";
    var rootQuerys=[]
    this.tapButton =[]
    for (let i=0;i<table.length;i++){

        buttons ="<span>" +
            "<button  type='button' class=\"btn btn-default\" id='"+table[i][0]+"' value='"+table[i][0]+"' style=\"margin-top: 7px\">Join '"+table[i][0]+"'</button>" +
            " <input type='text' class='form form-control' id='txt"+table[i][0]+"' value='"+whereTable[i]+"'></span>"
        // button+="<button  type='button' class=\"btn btn-default\" id='"+table[i][0]+"' value='"+table[i][0]+"' style=\"margin-top: 7px\">Join '"+table[i][0]+"'</button>"

        if(testButton==true){
            //alert( 'existe deja')
        }else {
            this.tapButton.push(buttons);
        }
        $("#loadButton").append(this.tapButton[i]);
        window.location.hash = "#loadButton";
        $("#"+table[i][0]).click(function (){

            rootQuerys;
            //if(rootQuerys.indexOf(rootQuerys[i])>-1){
            //alert( 'existe deja')
            display("Has  been added ","getStatu")
            // rootQuerys.splice(rootQuerys.indexOf(rootQuerys[i],1));
            //rootQuery +=" "+table[i][1];
            //}else {
            // rootQuerys.push(table[i][1]);
            //rootQuery +=" "+table[i][1]+" "+$("#txt"+table[i][0]).val();

            $("#getJsonAll").text("");
            $("#getJsonAll").append(rootQuery);
            $("#getJsonAll").append(table[i][1]);
            $("#getJsonAll").append($("#txt"+table[i][0]).val());
            // rootQuery = $("#getJsonAll").text();
            //display(rootQuery,"getJsonAll")

            // alert("join value "+table[i][1])
            //  }

            this.adqlContent = [];
            $("#getJsonAll").html($("#getJsonAll").text());
            window.location.hash = "#loadJson";

            this.adqlContent.push($("#getJsonAll").text());
            console.log(this.adqlContent)


        })


    }
    testButton = true

    // console.log(this.tapButton);
    return this.adqlContent
}



TapApi.prototype.getRootQuery1 = function () {
    let out = "";
    let query
    if (this.testConnection == true) {
        let listJoinAndId = this.getListJoinAndId(this.getConnector().service['table'], this.getObjectMap().succes.object_map);
        let listId = this.getListeId(listJoinAndId)
        // alert(listId);
        //alert(listJoinAndId)
        out = this.tapService.createMainJson(this.query, this.getObjectMap().succes.object_map, this.getConnector().service["table"], listId, listJoinAndId);
        query = json2Requete.getAdql(this.getObjectMap().succes.object_map);
    }

    return query;
}


/**
 *
 * @param {*} listJoinAndId the list of id returned by TapServiceConnector.prototype.getListJoinAndId
 * @return   list of all id
 */

TapApi.prototype.getListeId = function (listJoinAndId) {
    var listId = [];
    for (var i = 0; i < listJoinAndId.length; i = i + 2) {
        if (!json2Requete.isString(listJoinAndId[i])) {
            var temp = listJoinAndId[i][0];
        } else {
            var temp = listJoinAndId[i];
        }
        if (listId.indexOf(temp) == -1) {
            listId.push(temp);//record the key linked to root table, No repeating
        }
    }
    return listId;
}
/**
 *
 *  @param {*} rootName |the root table names of tabservice
 * @param {*} mainJsonData the main json generated by the  method createJson()
 * @returns return array containing all join table with correct id
 */
TapApi.prototype.getListJoinAndId = function (rootName, mainJsonData) {
    //alert(rootName);
    var listJoinAndId = [];
    listJoinAndId = this.joinAndId(rootName, mainJsonData)
    return listJoinAndId;
}
/**
 *
 * @param {*} root  represent the root table
 * @param {*} json represent the main json create by the method createMainJson
 * @returns return the list of id of join table
 */
TapApi.prototype.joinAndId = function (root, json) {
    var list = [];
    for (var key in json) {
        if (key == root) {
            for (var join in json[key].join_tables) {
                list.push(json[key].join_tables[join].target);
                list.push(join);
            }
        }
    }
    return list;
}

TapApi.prototype.joinTable = function (table) {
    let jsonAll = this.getObjectMap().succes.object_map;
    let joinTable = [];

    //alert(jsonAll[table]);
    if(jsonAll[table]==undefined){
        let json={}
        jsonAll= json;
        joinTable.push(table);
        //alert(JSON.stringify(joinTable,undefined,2))
    }else{
        // alert(table+ " has join table")
        for (let key in jsonAll[table].join_tables) {
            //alert(key)
            if (key.indexOf("2") != -1) {
                continue; //same rootTable and join_table, I made the second name of the repeat followed by a number 2//@TODO
            }
            else {
                joinTable.push(key);
            }
        }
    }

    console.log(JSON.stringify(joinTable,undefined,2));
    return joinTable;
};










aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhlllllllllllllllllllllllllllll
TapApi.prototype.getTableAttributeHandlers = function (table) {
    /**/
    let jsonContaintRootQueryIdsValues = {
        succes: {
            status: "",
            attribute_handlers: [{
                "name": table,
                "db_name": this.connector.service["table"],
                "column_name": "",
                "unit": "",
                "ucd": "",
                "utype": "",
                "dataType": "",
                "description": ""
            }]
        },
        failure: {
            notConnected: {status: "", message: ""},
            otherError: {status: "", message: ""}
        }
    }

    let doubleArrayValue = [];
    let singleArrayValue = [];
    if (this.testConnection == true) {

        var sj = new jsonRead(this.getObjectMap().succes.object_map);
        var adql = this.handlerAttribut.addAllColumn(table, this.connector.service["schema"]);

        var s = this.tapService;
        var votableQueryResult = s.Query(adql);
        // var dataTable = VOTableTools.votable2Rows(votableQueryResult)
        console.log("///--------------------------------------------------------/////////////////");

        //console.log(adql);
        let dataTable;
        let contentText;
        let Field;
        let nbCols;
        if (votableQueryResult != undefined) {
            dataTable = VOTableTools.votable2Rows(votableQueryResult);
            console.log("///-----------4444444444444444444444444444444---------------------------------------------/////////////////")
            console.log(dataTable)
            contentText = votableQueryResult.responseText;
            Field = VOTableTools.genererField(votableQueryResult, contentText)
            //let tableName = this.getConnector().service["table"];
//console.log(dataTable);
            nbCols = Field.length;
            //console.log(nbCols);
            // alert(nbCols);
            let rowN
            for (rowN = 0; rowN < dataTable.length; rowN++) {//table  content
                if (rowN > 0) {
                    if (rowN % nbCols == 0) {
                        singleArrayValue.unshift(dataTable[rowN]);
                        doubleArrayValue.push(singleArrayValue);
                        singleArrayValue = []
                    } else {
                        singleArrayValue.push(dataTable[rowN]);
                    }
                } else {
                    singleArrayValue.push(dataTable[rowN]);
                }


                /*for (let col = 0; col < nbCols; col++) {
                    if(nbCols % (col)!=0){
                        singleArrayValue.push(dataTable[col]);
                        console.log(nbCols /(col+1));
                    }else {

                        doubleArrayValue.push(singleArrayValue);
                        singleArrayValue = [];
                        console.log(singleArrayValue)
                    }

                }*/

                //console.log(singleArrayValue);
            }
            doubleArrayValue.splice(doubleArrayValue[0][0], 1);
            //console.log(doubleArrayValue);
            //alert(doubleArrayValue);
            jsonContaintRootQueryIdsValues.succes.status = "OK"
            let jsonContaintHandlersValue=[]
            for (let c = 0; c < doubleArrayValue.length; c++) {
                jsonContaintRootQueryIdsValues.succes.attribute_handlers[0] .column_name = doubleArrayValue[c][0];
                jsonContaintRootQueryIdsValues.succes.attribute_handlers[0].unit = doubleArrayValue[c][1];
                jsonContaintRootQueryIdsValues.succes.attribute_handlers[0].ucd = doubleArrayValue[c][2];
                jsonContaintRootQueryIdsValues.succes.attribute_handlers[0].utype = doubleArrayValue[c][3];
                jsonContaintRootQueryIdsValues.succes.attribute_handlers[0].dataType = doubleArrayValue[c][4];
                jsonContaintRootQueryIdsValues.succes.attribute_handlers[0].description = doubleArrayValue[c][5];
                jsonContaintHandlersValue.push(jsonContaintRootQueryIdsValues.succes.attribute_handlers);
                jsonContaintRootQueryIdsValues.succes.attribute_handlers =[{
                    "name": table,
                    "db_name": this.connector.service["table"],
                    "column_name": "",
                    "unit": "",
                    "ucd": "",
                    "utype": "",
                    "dataType": "",
                    "description": ""
                }]
            }
             jsonContaintRootQueryIdsValues.succes.attribute_handlers= jsonContaintHandlersValue;

        } else {

            jsonContaintRootQueryIdsValues.failure.otherError.status = "Failed"
            jsonContaintRootQueryIdsValues.failure.otherError.message = "error_message"
            // alert('you are not connected');
        }
    } else {
        jsonContaintRootQueryIdsValues.failure.notConnected.status = "Failed";
        jsonContaintRootQueryIdsValues.failure.notConnected.message = "No active TAP connection"
    }
    if(jsonContaintRootQueryIdsValues.succes.status=="OK"){
        return jsonContaintRootQueryIdsValues.succes
    }else if ( jsonContaintRootQueryIdsValues.failure.notConnected.status=="Failed"){
        return jsonContaintRootQueryIdsValues.failure.notConnected
    }else {
         return jsonContaintRootQueryIdsValues.failure.otherError;
    }
    //console.log(doubleArrayValue)

}

































*************************************************** end jsonrootvalues





















var testBasic = false;
        if(selector=='basic'){
          
          if(testBasic==false){
            //tableContentQueryField.push('basic');
            testBasic=true;
          }
          simbadService.setAdqlQuery(tableContentQuery[tableContentQuery.length-1]);
          alert(simbadService.getAdqlQuery())
          var data = simbadService.loadJson();
          var listJoinAndId = simbadService.getListJoinAndId(tableContentQueryField[i],data);
          var listId = simbadService.getListeId(listJoinAndId)
          var textArea = $("#txtAreaAdql").val(tableContentQuery[tableContentQuery.length-1])
           out= simbadService.tapService.createMainJson(simbadService.getAdqlQuery(),data,tableContentQueryField[tableContentQueryField.length-1],listId,listJoinAndId);

           alert(tableContentQueryField[tableContentQueryField.length-1])
          
      console.log(tableContentQuery);console.log(tableContentQueryField);
      var  QObject = simbadService.tapService.Query(textArea.val());
      var dataTable = VOTableTools.votable2Rows(QObject);
         
        
          $("#selectDiv").html(selectTableToJoin_html(a))
          window.location.hash = "#selectDiv"
          console.log("ddddddddddddddddddddddddddddddddddddddddddddd") 
          textArea = $("#txtAreaAdql").val(tableContentQuery[tableContentQuery.length-1])
          // document.getElementById("refresh").style["display"] = "none"
      
          
      console.log(tableContentQueryField)
      console.log(tableContentQuery)
          //textArea.innerHTML = tableContentQuery[i];
          $("#executeAdql").click(function(){
          /*document.getElementById("refresh").style["display"] = "block"
            var  QObject = simbadService.tapService.Query(textArea.val());
            var dataTable = VOTableTools.votable2Rows(QObject);
                //mainData = tapS.createMainJson(tableContentQueryField[i],data,'basic',listId,listJoinAndId);
  
                $("#loadJson").html(JSON.stringify(out,undefined,2));
                window.location.hash = "#loadJson"
  
  
  
                $("#votableJson").html(JSON.stringify(dataTable,undefined,2));
                window.location.hash = "#votableJson"

                $("#selectDiv").html(selectTableToJoin_html(a))
                window.location.hash = "#selectDiv"
                console.log("ddddddddddddddddddddddddddddddddddddddddddddd")
              
                textArea = $("#txtAreaAdql").val(tableContentQuery[i])*/
                $("#loadJson").html(JSON.stringify(out,undefined,2));
                window.location.hash = "#loadJson"
                $("#votableJson").html(JSON.stringify(dataTable,undefined,2));
                window.location.hash = "#votableJson"
                simbadService.joinTableByField(out,'basic')
          })
        
        
              //console.log(dataTable)
          //alert(tableContentQuery[i]);
        // $("#votableJson").html(tableContentQuery[i]);
          //window.location.hash = "#votableJson"
          //alert(selectValue);
          break;
        }
      
      }



TapServiceConnector.prototype.selectTableToJoins = function(simbadService,tableContentQueryField,tableContentQuery){


$(document).ready(function(){

     

  $("select#selectToJoin").change(function(){
    
      var selector = $(this).children("option:selected").val();

      //alert("You have selected the country - " + selector);

      //(simbadService,tableContentQueryField,tableContentQuery)
    
      for(var i=0;i<tableContentQueryField.length;i++){

        var a = simbadService.getJoinTables(tableContentQueryField[i]);
        var out;
        if(selector == tableContentQueryField[i]){
          /*this.setAdqlQuery(tableContentQueryField[i]);*/
                        simbadService.setAdqlQuery(tableContentQuery[i]);
                        //alert(simbadService.getAdqlQuery())
                        var data = simbadService.loadJson();
                        var listJoinAndId = simbadService.getListJoinAndId(tableContentQueryField[i],data);
                        var listId = simbadService.getListeId(listJoinAndId)
                        var textArea = $("#txtAreaAdql").val(tableContentQuery[i])
                         out= simbadService.tapService.createMainJson(textArea.val(),data,tableContentQueryField[i],listId,listJoinAndId);;
                        
                     


                    console.log(tableContentQuery);console.log(tableContentQueryField);
                    var  QObject = simbadService.tapService.Query(textArea.val());
                    var dataTable = VOTableTools.votable2Rows(QObject);
                        //mainData = tapS.createMainJson(tableContentQueryField[i],data,'basic',listId,listJoinAndId);
                      /* $("#loadJson").html(JSON.stringify(out,undefined,2));
                        window.location.hash = "#loadJson"
                        $("#votableJson").html(JSON.stringify(dataTable,undefined,2));
                        window.location.hash = "#votableJson"*/
                      
                        $("#selectDiv").html(selectTableToJoin_html(a))
                        window.location.hash = "#selectDiv"
                        console.log("ddddddddddddddddddddddddddddddddddddddddddddd") 
                        textArea = $("#txtAreaAdql").val(tableContentQuery[i])
                        // document.getElementById("refresh").style["display"] = "none"
                    
                        
                    console.log(tableContentQueryField)
                    console.log(tableContentQuery)
                        //textArea.innerHTML = tableContentQuery[i];
                        $("#executeAdql").click(function(){
                        /*document.getElementById("refresh").style["display"] = "block"
                          var  QObject = simbadService.tapService.Query(textArea.val());
                          var dataTable = VOTableTools.votable2Rows(QObject);
                              //mainData = tapS.createMainJson(tableContentQueryField[i],data,'basic',listId,listJoinAndId);
                
                              $("#loadJson").html(JSON.stringify(out,undefined,2));
                              window.location.hash = "#loadJson"
                
                
                
                              $("#votableJson").html(JSON.stringify(dataTable,undefined,2));
                              window.location.hash = "#votableJson"

                              $("#selectDiv").html(selectTableToJoin_html(a))
                              window.location.hash = "#selectDiv"
                              console.log("ddddddddddddddddddddddddddddddddddddddddddddd")
                            
                              textArea = $("#txtAreaAdql").val(tableContentQuery[i])*/
                              var textArea = $("#txtAreaAdql").val()
                              out= simbadService.tapService.createMainJson(textArea,data,tableContentQueryField[i],listId,listJoinAndId);;
                    
                            var  QObject = simbadService.tapService.Query(textArea);
                            var dataTable = VOTableTools.votable2Rows(QObject)

                              $("#loadJson").html(JSON.stringify(out,undefined,2));
                              window.location.hash = "#loadJson"
                              var jsonData = simbadService.createVoTableResultJson(simbadService.connect())
                              $("#votableJson").html(JSON.stringify(jsonData,undefined,2));
                              window.location.hash = "#votableJson"
                              simbadService.joinTableByField(out,baseTableName)
                        })
                      
                      
                            //console.log(dataTable)
                        //alert(tableContentQuery[i]);
                      // $("#votableJson").html(tableContentQuery[i]);
                        //window.location.hash = "#votableJson"
                        //alert(selectValue);
                        break;
        }
      }

  });
});




}

















      tap service connector

      class TapServiceConnector {
    constructor(_serviceUrl, _schema, _shortname) {
      //super();
        let serviceUrl = _serviceUrl;
        let schema = _schema;
        let shortname = _shortname;
        let  adqlQuery = "";
        let rootTable= "";
        this.tapService = new TapService(_serviceUrl,_schema,_shortname,true)
        this.jsonSchema = {};
       
        // getteur and setteur for private parameters
        this.setServiceUrl = function(myServiceUrl) {
          serviceUrl = myServiceUrl;
        }
        this.getServiceUrl = function() {
          return serviceUrl;
        }
        this.setSchema = function(mySchema) {
          schema = mySchema;
        }
        this.getSchema = function() {
          return schema;
        }
        this.setShortname = function(myShortname) {
          shortname = myShortname;
        }
        this.getShortname = function() {
          return shortname;
        }

        this.setAdqlQuery = function(myAdqlQuery) {
          adqlQuery = myAdqlQuery;
        }
        this.getAdqlQuery = function() {
          return adqlQuery;
        }
        this.setRootTable = function(myRootTable) {
          rootTable = myRootTable;
        }
        this.getRootTable = function() {
          return rootTable;
        }

        
    }

 

}


TapServiceConnector.prototype.connect=function(){ 
  var votableQueryResult = this.tapService.Query(this.getAdqlQuery());
   return votableQueryResult;
    //console.log(JSON.stringify(adqlQuery,undefined,3))
}

 TapServiceConnector.prototype.connectService=function() {
   // this.buildQuery();
    this.connect();
   // this.buildJsonSchema();
}

TapServiceConnector.prototype.setRootTable=function(shema,table){
 
}
TapServiceConnector.prototype.loadJson=function() {
          
          return this.tapService.createJson();

}
TapServiceConnector.prototype.joinAndId=function(root,json){
  var list = [];
  for(var key in json){
      if(key == root){
          for(var join in json[key].join_tables){
              list.push(json[key].join_tables[join].target);
              list.push(join);
          }
      }
  }
  return list;
}
/**
 * 
 * @param {*} listJoinAndId the list of id returned by TapServiceConnector.prototype.getListJoinAndId
 * @return   list of all id
 */

TapServiceConnector.prototype.getListeId=function(listJoinAndId){
  var listId = [];
  for(var i = 0;i<listJoinAndId.length;i=i+2){
      if(!json2Requete.isString(listJoinAndId[i])){
          var temp = listJoinAndId[i][0];
      }
      else{
          var temp = listJoinAndId[i];
      }
      if(listId.indexOf(temp)==-1){
          listId.push(temp);//record the key linked to root table, No repeating
      }
  }
  return listId;
}

/**
 * 
 * @param {*} rootName |the table names of tabservice
 * @param {*} mainJsonData the main json generated by the tapservice.createJson()
 */
 TapServiceConnector.prototype.getListJoinAndId=function(rootName,mainJsonData){
  var listJoinAndId=[];
  listJoinAndId = this.joinAndId(rootName,mainJsonData)
  return listJoinAndId;
}

TapServiceConnector.prototype.getJoinTables=function(baseTableName){
  var data = this.loadJson();
  var jsonread=new jsonRead(data);

  return jsonread.joinTable(baseTableName);
}

TapServiceConnector.prototype.getCorrectFieldOfJoinTable=function(mainJsonData){
  var tableContentQueryField=[]
  Object.keys(mainJsonData).forEach(function(key) {
    tableContentQueryField.push(key);
  });
 // alert(tableContentQueryField)
  return tableContentQueryField;
}

TapServiceConnector.prototype.getCorrectJoinQueryOfEachTableField=function(mainJsonData){
  var tableContentQuery=[];
  var JsonValue;
  Object.keys(mainJsonData).forEach(function(key) {
    JsonValue = mainJsonData[key];
   Object.keys(JsonValue).forEach(function(key) {
       var  queryValue ;
       if(key!="key"){
        queryValue = JsonValue[key];
        tableContentQuery.push(queryValue);
            
       }  
   });

});
return tableContentQuery;
}

TapServiceConnector.prototype.joinTableByField=function(mainJsonData,baseTableName,url,schema,shortname){
  var data = this.loadJson();
  var jsonread=new jsonRead(data);
  var tableContentQueryField=this.getJoinTables(baseTableName);
  tableContentQuery= this.getCorrectJoinQueryOfEachTableField(mainJsonData);
  var tableContentQueryField=this.getCorrectFieldOfJoinTable(mainJsonData);
  var value;
  /*
  Object.keys(mainJsonData).forEach(function(key) {
     value = mainJsonData[key];
     tableContentQueryField.push(key);
    Object.keys(value).forEach(function(key) {
        var  valu ;
        if(key!="key"){
             valu = value[key];
             tableContentQuery.push(valu);
             
        }  
    });

});*/
var data = this.loadJson();

 ;
        schema = "public";
        url = "http://simbad.u-strasbg.fr/simbad/sim-tap/sync";
        shortname = "Simbad";
        var simbadService = new TapServiceConnector("http://simbad.u-strasbg.fr/simbad/sim-tap/sync",schema,shortname);
        

$(document).ready(function(){

     

  $("select#selectToJoin").change(function(){
    
      var selector = $(this).children("option:selected").val();

      //alert("You have selected the country - " + selector);

      //(simbadService,tableContentQueryField,tableContentQuery)
    
      for(var i=0;i<tableContentQueryField.length;i++){

        var a = simbadService.getJoinTables(tableContentQueryField[i]);
        var out;
        if(selector == tableContentQueryField[i]){
          /*this.setAdqlQuery(tableContentQueryField[i]);*/
                        simbadService.setAdqlQuery(tableContentQuery[i]);
                        //alert(simbadService.getAdqlQuery())
                        var data = simbadService.loadJson();
                        var listJoinAndId = simbadService.getListJoinAndId(tableContentQueryField[i],data);
                        var listId = simbadService.getListeId(listJoinAndId)
                        var textArea = $("#txtAreaAdql").val(tableContentQuery[i])
                         out= simbadService.tapService.createMainJson(textArea.val(),data,tableContentQueryField[i],listId,listJoinAndId);;
                        
                     


                    console.log(tableContentQuery);console.log(tableContentQueryField);
                    var  QObject = simbadService.tapService.Query(textArea.val());
                    var dataTable = VOTableTools.votable2Rows(QObject);
                        //mainData = tapS.createMainJson(tableContentQueryField[i],data,'basic',listId,listJoinAndId);
                      /* $("#loadJson").html(JSON.stringify(out,undefined,2));
                        window.location.hash = "#loadJson"
                        $("#votableJson").html(JSON.stringify(dataTable,undefined,2));
                        window.location.hash = "#votableJson"*/
                      
                        $("#selectDiv").html(selectTableToJoin_html(a))
                        window.location.hash = "#selectDiv"
                        console.log("ddddddddddddddddddddddddddddddddddddddddddddd") 
                        textArea = $("#txtAreaAdql").val(tableContentQuery[i])
                        // document.getElementById("refresh").style["display"] = "none"
                    
                        
                    console.log(tableContentQueryField)
                    console.log(tableContentQuery)
                        //textArea.innerHTML = tableContentQuery[i];
                        $("#executeAdql").click(function(){
                        /*document.getElementById("refresh").style["display"] = "block"
                          var  QObject = simbadService.tapService.Query(textArea.val());
                          var dataTable = VOTableTools.votable2Rows(QObject);
                              //mainData = tapS.createMainJson(tableContentQueryField[i],data,'basic',listId,listJoinAndId);
                
                              $("#loadJson").html(JSON.stringify(out,undefined,2));
                              window.location.hash = "#loadJson"
                
                
                
                              $("#votableJson").html(JSON.stringify(dataTable,undefined,2));
                              window.location.hash = "#votableJson"

                              $("#selectDiv").html(selectTableToJoin_html(a))
                              window.location.hash = "#selectDiv"
                              console.log("ddddddddddddddddddddddddddddddddddddddddddddd")
                            
                              textArea = $("#txtAreaAdql").val(tableContentQuery[i])*/
                              var textArea = $("#txtAreaAdql").val()
                              out= simbadService.tapService.createMainJson(textArea,data,tableContentQueryField[i],listId,listJoinAndId);;
                    
                            var  QObject = simbadService.tapService.Query(textArea);
                            var dataTable = VOTableTools.votable2Rows(QObject)

                              $("#loadJson").html(JSON.stringify(out,undefined,2));
                              window.location.hash = "#loadJson"
                              var jsonData = simbadService.createVoTableResultJson(simbadService.connect())
                              $("#votableJson").html(JSON.stringify(jsonData,undefined,2));
                              window.location.hash = "#votableJson"
                              simbadService.joinTableByField(out,baseTableName)
                        })
                      
                      
                            //console.log(dataTable)
                        //alert(tableContentQuery[i]);
                      // $("#votableJson").html(tableContentQuery[i]);
                        //window.location.hash = "#votableJson"
                        //alert(selectValue);
                        break;
        }
      }

  });
});


TapServiceConnector.prototype.selectTableToJoin = function(simbadService,tableContentQueryField,tableContentQuery){
  
}

 TapServiceConnector.prototype.createVoTableResultJson=function(votableQueryResult){
  var voTableData  = VOTableTools.votable2Rows(votableQueryResult);
  var data =votable2data(votableQueryResult)
  var votableField = VOTableTools.getField (votableQueryResult);
  var jsonData = { 
      data: {
          
      }
   }
   var k=0;
  
     /* jsonData = {votableField:voTableData[i]}
     for (var j = 0; j <votableField.length ; j = j + 1) {
       for(var i=0;i<data.length;i++){
       jsonData.data[votableField[j]] =voTableData[j] ;   
   }*/
   for(var i = 0; i<votableField.length;i++){
       
      //jsonData.data[votableField[i]]=voTableData[i] ; 
      jsonData.data[i]=data[i] ;    
  }     
   
      
  
/*  console.log(JSON.stringify(jsonData,undefined,2))
  console.log(votableField)
  console.log(voTableData)*/
  return jsonData;
}

 TapServiceConnector.prototype.mainJsonData =function (adql) {
  var data = this.loadJson();
  var QObject = this.connect();
  var listJoinAndId = this.getListJoinAndId('basic',data);
  var listId = this.getListeId(listJoinAndId);
   return simbadService.tapService.createMainJson(adql,data,'basic',listId,listJoinAndId);;
  
}
//alert(selectValue);
/*for(var i=0;i<tableContentQuery.length;i++){
  if(selectValue == tableContentQuery[i]){
    //alert(selectValue);
    break;
  }
}*/

//return this.genererZone3(tableContentQuery[0],this.tapService,baseTableName,jsonread.json,this.getListJoinAndId(baseTableName,data));
//return tableContentQuery;

}





TapServiceConnector.prototype.genererZone3 =function(adql,s,root,n,listJoinAndId){
  var QObject = s.Query(adql);
  var dataTable = VOTableTools.votable2Rows(QObject);
  var contentText = QObject.responseText;
  var Field =VOTableTools.genererField(QObject,contentText);
  console.log("field1111111111111")
  console.log(Field)
  var nb = Field.length;
  if(nb==0){
      $(contentText).find('RESOURCE[type="results"]').each(function(){
          if($(this).find("INFO").attr("name")=="QUERY_STATUS"){
              out = $(this).context.textContent;
              return out;
          }
         
      })
  }
  else{
      out = genererTable(Field,dataTable,n.json,root,listJoinAndId);
  }
  return out;
}

TapServiceConnector.prototype.genererTable =function (Field,dataTable,json,root,listJoinAndId){//include textarea
  var listJoin=[];
  var nb = Field.length;
  for(var key in json[root].join_tables){
      listJoin.push(key);
  }
  var out = ""
  out += "<div id = 'ddata'><table class = 'table' id='example-table2' role = 'grid'>";
  out += "<h4>The amount of data is: </h4>"
  out +="<thead><tr role='row'>";//head
  out +="<th>JoinTable</th>";
  for(var j=0;j<nb;j++){
      out +="<th class='sorting_disabled' rowspan='1' colspan='1' style='text-align: auto;'>"+Field[j]+"</th>";
  }
  out +="</tr></thead>";
  var joinIdDic ={};
  for(var i=0;i<listJoinAndId.length;i=i+2){
      if(!json2Requete.isString(listJoinAndId[i])){
          joinIdDic[listJoinAndId[i+1]]=listJoinAndId[i][0];
      }else{
          joinIdDic[listJoinAndId[i+1]]=listJoinAndId[i];
      }
  }
  var jsonTable ={};
  for(var key in joinIdDic){
      for(var j=1;j<nb;j++){
          if(Field[j]==joinIdDic[key]){
              var temp =j;//save the position of key
          }
      }
      jsonTable[key]=temp;
  }
  //console.log(listJoinAndId)
  //console.log(joinIdDic)
  //console.log(jsonTable)
  out +="<tbody>"
  var count =0;
  var number=0;
  for(var j=0;j<dataTable.length;j++){//table  content
      if(count==0){
          out +="<tr role='row'>";
          out +="<td><div class='btn-group' style='width :100px'>"+
          "<button type='button' class='btn btn-primary' >JOIN</button>"+
          "<button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >"+
              "<span class='caret'></span>"+
              "<span class='sr-only'></span>"+
          "</button>"+
          "<ul class='dropdown-menu' role='menu'>";
          for(var i=0;i<listJoin.length;i++){
              var position = jsonTable[listJoin[i]];
              out+="<li><a href='#' id='"+ dataTable[j+position] +"|"+ listJoin[i] + "'  name = 'boid'>"+listJoin[i]+" "+"</a></li>";
          }
          out +="</div></td>"
      }
    
          out +="<td style='text-align: auto;'>"+dataTable[j]+"</td>";
      
      
     
      count =count+1;
      if(count==nb){
          out +="</tr>";
          number++;
          count=0;
      }
  }
  out+="</tbody>"
  out += "</table></div>"
  var start = out.indexOf("is:")+3;
  out = out.slice(0,start)+" "+number +out.slice(start)
  return out;
}







/////////////////////////////////////////// TapService ///////////////////////////////////////////////////////

"use strict";
var TapService = /** @class */ (function () {
    function TapService(url, schema, label, checkstatus) {
        this.url = url;
        this.schema = schema;
        this.label = label;
        this.checkstatus = checkstatus;
    }
    /***
     * Receive adql, return query objects
     * @param :receive adql statements and perform queries
     * @returns :votable object
     */
    TapService.prototype.Query = function (adql) {
        var site = this.url;
        //alert(adql);
        var correctFormat = "votable";
        var reTable;
        if(this.url=="http://simbad.u-strasbg.fr/simbad/sim-tap/sync" || this.url == "http://dc.zah.uni-heidelberg.de/tap/sync"){
            correctFormat ="votable";
        }else{
            correctFormat ="votable";
        }
        console.log("url: " + site)
        reTable = $.ajax({
            url: "" + site,
            type: "GET",
            data: { query: "" + adql, format: correctFormat, lang: 'ADQL', request: 'doQuery' },
            async: false
        })
            .done(function (result) {
            return result;
        });
        console.log(JSON.stringify(reTable,undefined,2))
        return reTable;
    };
    /**
     * Get the names of all the tables.
     * It's for Simbad(schema_name = 'public'), GAVO(schema_name = 'rr'), VizieR(schema_name = 'metaviz'), CAOM(schema_name = 'dbo').
     * @returns :votavle object
     */
    TapService.prototype.allTableQuery = function () {
        var site = this.url;
        var checkstatus = this.checkstatus;
        var schema_name = this.schema;
        var reTable;
        //By default, all are displayed.
        var checkvalue = 'SELECT DISTINCT T.table_name as table_name, T.description FROM tap_schema.tables as T WHERE T.schema_name = \'' + schema_name + '\' ';
        if (checkstatus == true) {
            checkvalue = 'SELECT DISTINCT TOP 100 T.table_name as table_name, T.description FROM tap_schema.tables as T WHERE T.schema_name = \'' + schema_name + '\' ';
        }
        reTable = $.ajax({
            url: "" + site,
            type: "GET",
            data: { query: "" + checkvalue, format: 'votable', lang: 'ADQL', request: 'doQuery' },
            async: false
        })
            .done(function (result) {
            return result;
        });
        return reTable;
    };
    /**
     * Get the from_table, target_table, from_column, target_column
     * @returns :votavle object
     */
    TapService.prototype.allLinkQuery = function () {
        var site = this.url;
        var checkstatus = this.checkstatus;
        var reLink;
        var checkvalue = 'SELECT tap_schema.keys.from_table as from_table, tap_schema.keys.target_table as target_table,tap_schema.keys.key_id , tap_schema.key_columns.from_column, tap_schema.key_columns.target_column FROM tap_schema.keys JOIN tap_schema.key_columns ON tap_schema.keys.key_id = tap_schema.key_columns.key_id';
        if (checkstatus == true) {
            checkvalue = 'SELECT TOP 100 tap_schema.keys.from_table as from_table, tap_schema.keys.target_table as target_table,tap_schema.keys.key_id , tap_schema.key_columns.from_column, tap_schema.key_columns.target_column FROM tap_schema.keys JOIN tap_schema.key_columns ON tap_schema.keys.key_id = tap_schema.key_columns.key_id';
        }
        reLink = $.ajax({
            url: "" + site,
            type: "GET",
            data: { query: "" + checkvalue, format: 'votable', lang: 'ADQL', request: 'doQuery' },
            async: false
        })
            .done(function (result) {
            return result;
        });
        return reLink;
    };
    /**
     * Add the schema name
     * @param table
     * @return schema.tablename
     */
    TapService.prototype.getQualifiedName = function (table) {
        if (table.indexOf(this.schema) != -1) {
            return table;
        }
        else {
            return this.schema + "." + table;
        }
    };
    /**
     * Delete the schema name
     * @param table
     * @return table name
     */
    TapService.prototype.getRightName = function (table) {
        if (table.indexOf(this.schema) == -1) {
            return table;
        }
        else {
            return table.replace(new RegExp(this.schema + '.', 'g'), "");
        }
    };
    /**
     * Get 2-dimensional array. The array returns all the information related to the rootTable.
     * @return : A 2-dimensional array. The array returns all the information related to the rootTable.
     */
    TapService.prototype.allLink = function () {
        var allLinkLimitObject;
        allLinkLimitObject = this.allLinkQuery();
        var reTableRe;
        var everyLink = [];
        var allLink = [[]];
        console.log(allLinkLimitObject);
        reTableRe = VOTableTools.votable2Rows(allLinkLimitObject);
        console.log(reTableRe);
        for (var i = 0; i < reTableRe.length; i = i + 5) {
            var tt = reTableRe[i + 1];
            tt = this.getRightName(tt);
            var tc = reTableRe[i + 4];
            var ft = reTableRe[i];
            ft = this.getRightName(ft);
            var fc = reTableRe[i + 3];
            var k_1 = 0;
            everyLink[k_1] = tt + '|' + tc;
            k_1 = 1;
            everyLink[k_1] = ft + '|' + fc;
            allLink.push(everyLink);
            everyLink = [];
        }
        var allLinkRe = [[]];
        var k = 0;
        for (var h = 1; h < allLink.length; h++) {
            allLinkRe[k] = allLink[h];
            k = k + 1;
        }
        console.log(allLinkRe);
        var t = this.removeViewTable(allLinkRe);
        console.log(t);
        var re = JSON.parse(JSON.stringify(t));
        console.log(re);
        return re;
    };
    /**
     * Get all the table's name.
     * @return all the table's name.
     */
    TapService.prototype.allTable = function () {
        var allTableObject = this.allTableQuery(); //Get all the tables
        var allTable = [];
        allTable = VOTableTools.votable2Rows(allTableObject);
        return allTable; //Return an array containing the names of the tables
    };
    /**
     * return all tables with the name of the join table.
     * @return json object
     */
    TapService.prototype.createJson = function () {
        var allTtable = [];
        var jsonAll = {};
        var columns = [];
        var constraints = "";
        var alllink = [[]];
        alllink = this.allLink();
        console.log(alllink);
        allTtable = this.allTable(); //Get the array containing the names of the tables.//Even number is the table name.
        console.log(allTtable);
        for (var k = 0; k < allTtable.length; k = k + 2) {
            var arrLink = {};
            var arrJoint = {};
            var flag = 0;
            var ifSame = 0;
            var nowTable = allTtable[k];
            nowTable = this.getRightName(nowTable);
            for (var i = 0; i < alllink.length; i++) {
                var arrLinkJoint = {};
                var tt = alllink[i][0].split("|");
                var ft = alllink[i][1].split("|");
                if (tt[0] == nowTable) {
                    loop: for (var key in arrLink) {
                        if (ft[0] == key) {
                            ifSame = 1;
                            arrLinkJoint["schema"] = this.schema;
                            arrLinkJoint["columns"] = columns;
                            arrLinkJoint["constraints"] = constraints;
                            var temp1 = [];
                            if (Array.isArray(arrLink[ft[0]].from) && arrLink[ft[0]].from.indexOf(ft[1]) == -1) {
                                temp1 = JSON.parse(JSON.stringify(arrLink[ft[0]].from));
                                temp1.push(ft[1]);
                            }
                            else {
                                temp1 = JSON.parse(JSON.stringify(arrLink[ft[0]].from));
                            }
                            arrLinkJoint["from"] = temp1;
                            temp1 = [];
                            if (Array.isArray(arrLink[ft[0]].target) && arrLink[ft[0]].target.indexOf(tt[1]) == -1) {
                                temp1 = JSON.parse(JSON.stringify(arrLink[ft[0]].target));
                                temp1.push(tt[1]);
                            }
                            else {
                                temp1 = JSON.parse(JSON.stringify(arrLink[ft[0]].target));
                            }
                            arrLinkJoint["target"] = temp1;
                            arrLink[ft[0]] = arrLinkJoint;
                            break loop;
                        }
                        else {
                            ifSame = 0;
                        }
                    }
                    if (ifSame == 0) {
                        flag = flag + 1;
                        arrLinkJoint["schema"] = this.schema;
                        arrLinkJoint["columns"] = columns;
                        arrLinkJoint["constraints"] = constraints;
                        arrLinkJoint["from"] = ft[1];
                        arrLinkJoint["target"] = tt[1];
                        arrLink[ft[0]] = arrLinkJoint;
                    }
                }
                else if (ft[0] == nowTable) {
                    loop: for (var key in arrLink) {
                        if (tt[0] == key) {
                            ifSame = 1;
                            arrLinkJoint["schema"] = this.schema;
                            arrLinkJoint["columns"] = columns;
                            arrLinkJoint["constraints"] = constraints;
                            var temp1 = [];
                            if (Array.isArray(arrLink[tt[0]].from) && arrLink[tt[0]].from.indexOf(tt[1]) == -1) {
                                temp1 = JSON.parse(JSON.stringify(arrLink[tt[0]].from));
                                temp1.push(tt[1]);
                            }
                            else {
                                temp1 = JSON.parse(JSON.stringify(arrLink[tt[0]].from));
                            }
                            arrLinkJoint["from"] = temp1;
                            temp1 = [];
                            if (Array.isArray(arrLink[tt[0]].target) && arrLink[tt[0]].target.indexOf(ft[1]) == -1) {
                                temp1 = JSON.parse(JSON.stringify(arrLink[tt[0]].target));
                                temp1.push(ft[1]);
                            }
                            else {
                                temp1 = JSON.parse(JSON.stringify(arrLink[tt[0]].target));
                            }
                            arrLinkJoint["target"] = temp1;
                            arrLink[tt[0]] = arrLinkJoint;
                            break loop;
                        }
                        else {
                            ifSame = 0;
                        }
                    }
                    ;
                    if (ifSame == 0) {
                        flag = flag + 1;
                        arrLinkJoint["schema"] = this.schema;
                        arrLinkJoint["columns"] = columns;
                        arrLinkJoint["constraints"] = constraints;
                        arrLinkJoint["from"] = tt[1];
                        arrLinkJoint["target"] = ft[1];
                        arrLink[tt[0]] = arrLinkJoint;
                    }
                }
            }
            if (flag == 0) {
                continue;
            }
            else {
                arrJoint["schema"] = this.schema;
                arrJoint["description"] = allTtable[k + 1];
                arrJoint["join_tables"] = arrLink;
                jsonAll[nowTable] = arrJoint;
            }
        }
        return jsonAll;
    };
    /**
   * In order to create the json with all join table
   * @param data :json
   * @param root :the main table
   * @return the json with all join table
   */
    TapService.prototype.createNewJson = function (data, root) {
        var reJson = {};
        for (var key in data) {
            var list_exist = [];
            list_exist.push(key);
            var joinJson = {};
            if (root == key) {
                joinJson["schema"] = data[key].schema;
                joinJson["description"] = data[key].description;
                joinJson["columns"] = [];
                joinJson["constraints"] = "";
                var joinJsonJoin = {};
                for (var join in data[key].join_tables) {
                    var joinJsonJoin1 = {};
                    list_exist.push(join);
                    joinJsonJoin1["schema"] = data[join].schema;
                    joinJsonJoin1["description"] = data[join].description;
                    joinJsonJoin1["columns"] = data[key].join_tables[join].columns;
                    joinJsonJoin1["constraints"] = data[key].join_tables[join].constraints;
                    joinJsonJoin1["from"] = data[key].join_tables[join].from;
                    joinJsonJoin1["target"] = data[key].join_tables[join].target;
                    var a = this.ifJoin(data, list_exist, join);
                    if (JSON.stringify(a) != '{}') {
                        joinJsonJoin1["join_tables"] = a;
                    }
                    joinJsonJoin[join] = joinJsonJoin1;
                    joinJson["join_tables"] = joinJsonJoin;
                }
                reJson[key] = joinJson;
                break;
            }
        }
        return reJson;
    };
    /***
     * @param data: the main json
     * @param list_exist:list of tables who are already recorded
     * @param root: the root table
     */
    TapService.prototype.ifJoin = function (data, list_exist, root) {
        var joinJsonJoin = {};
        for (var key in data) {
            if (key == root) {
                for (var join in data[key].join_tables) {
                    if (list_exist.indexOf(join) == -1) {
                        list_exist.push(join);
                        var joinJsonJoin1 = {};
                        joinJsonJoin1["schema"] = data[join].schema;
                        joinJsonJoin1["description"] = data[join].description;
                        joinJsonJoin1["columns"] = data[key].join_tables[join].columns;
                        joinJsonJoin1["constraints"] = data[key].join_tables[join].constraints;
                        joinJsonJoin1["from"] = data[key].join_tables[join].from;
                        joinJsonJoin1["target"] = data[key].join_tables[join].target;
                        var a = this.ifJoin(data, list_exist, join);
                        if (JSON.stringify(a) != '{}') {
                            joinJsonJoin1["join_tables"] = a;
                        }
                        joinJsonJoin[join] = joinJsonJoin1;
                    }
                }
                break;
            }
        }
        return joinJsonJoin;
    };
    /**
     *
     * @param adql
     * @param jsonAll json
     * @param root root table's name
     * @param listId all the key between root table and join table
     * @param listJoinAndId all the join table and it's id with root table
     */
    TapService.prototype.createMainJson = function (adql, jsonAll, root, listId, listJoinAndId) {
        var QObject = this.Query(adql);
        var joinIdDic = {};
        for (var i = 0; i < listJoinAndId.length; i = i + 2) {
            if (!json2Requete.isString(listJoinAndId[i])) {
                joinIdDic[listJoinAndId[i + 1]] = listJoinAndId[i][0];
            }
            else {
                joinIdDic[listJoinAndId[i + 1]] = listJoinAndId[i];
            }
        }
        var IdDic = {};
        for (var i = 0; i < listId.length; i++) {
            IdDic[listId[i]] = i;
        }
        var dataTable = VOTableTools.votable2Rows(QObject);
        var json = {};
        var contentTable = {};
        var contentAdql;
        var schema;
        for (var keyRoot in jsonAll) {
            if (keyRoot == root) {
                schema = jsonAll[keyRoot].schema;
                if (schema == 'public') {
                    schema = "\"" + "public" + "\"";
                }
                var m =0;
                for (var key in jsonAll[keyRoot].join_tables) {
                    
                    contentTable = {};
                    for (var i = 0; i < dataTable.length; i = i + listId.length) {
                        contentAdql = "";
                        contentAdql = "SELECT TOP 100 " + schema + "." + key + ".*" + " ";
                        contentAdql += "FROM " + schema + "." + keyRoot + " ";
                        contentAdql += "JOIN " + schema + "." + key + " ";
                        var k=0;
                        if (!json2Requete.isString(jsonAll[keyRoot].join_tables[key].target)) {
                            contentAdql += "ON " + schema + "." + keyRoot + "." + jsonAll[keyRoot].join_tables[key].target[0];
                            contentAdql += "=" + schema + "." + key + "." + jsonAll[keyRoot].join_tables[key].from[0];
                            var temp = IdDic[joinIdDic[key]];
                            
                            if (schema.indexOf("public") != -1) {
                                contentAdql += " WHERE " + jsonAll[keyRoot].join_tables[key].target[0] + "=" + dataTable[i + temp];
                            }
                            else if (schema.indexOf("rr") != -1) {
                                contentAdql += " WHERE " + jsonAll[keyRoot].join_tables[key].target + "=" + "\'" + dataTable[i + temp] + "\'";
                            }
                            else if (schema.indexOf("public") != -1 && contentAdql.indexOf("oid") == -1) {
                                contentAdql += " WHERE " + schema + "." + key + "." + jsonAll[keyRoot].join_tables[key].target + "=" + dataTable[i + temp];
                            }
                            else {
                                contentAdql += " WHERE " + schema + "." + key + "." + jsonAll[keyRoot].join_tables[key].target[0] + "=" + "\'" + dataTable[i + temp] + "\'";
                            }
                            contentTable[dataTable[i + temp]] = contentAdql;
                        }
                        else { 
                            contentAdql += "ON " + schema + "." + keyRoot + "." + jsonAll[keyRoot].join_tables[key].target;
                            contentAdql += "=" + schema + "." + key + "." + jsonAll[keyRoot].join_tables[key].from;
                            var temp = IdDic[joinIdDic[key]];
                            var j=0;
                            
                            var votableField = VOTableTools.getField (QObject);
                           
                            //console.log(k+"  iddic "+votableField[k]+" "+joinIdDic[key]+" "+dataTable[k])
                            for(j=0;j<votableField.length;j++){
                                if(votableField[j]==joinIdDic[key]){
                                    k=j;
                                    
                                   // break
                                }
                               
                            }

                            if (schema.indexOf("public") != -1 && contentAdql.indexOf("oid") != -1) {
                                contentAdql += " WHERE " + jsonAll[keyRoot].join_tables[key].from + "=" + dataTable[k];
                            }
                            else if (schema.indexOf("rr") != -1 && contentAdql.indexOf("ivoid=") == -1) {
                                //alert(schema+'.'+key+'.'+jsonAll[keyRoot].join_tables[key].from );
                                contentAdql += " WHERE " + schema+'.'+key+'.'+jsonAll[keyRoot].join_tables[key].from + "=" + "\'" + dataTable[k] + "\'";
                            }
                            else if (schema.indexOf("public") != -1 && contentAdql.indexOf("oid") == -1) {
                                if (json2Requete.isString(dataTable[k])) {
                                    contentAdql += " WHERE " + schema + "." + key + "." + jsonAll[keyRoot].join_tables[key].from + "=" + "\'" + dataTable[k] + "\'";
                                }
                                else {
                                    contentAdql += " WHERE " + schema + "." + key + "." + jsonAll[keyRoot].join_tables[key].from + "=" + dataTable[k];
                                }
                            }
                            else {
                                contentAdql += " WHERE " + schema + "." + key + "." + jsonAll[keyRoot].join_tables[key].from + "=" + "\'" + dataTable[k] + "\'";
                            }
                        }
                        contentTable[dataTable[k]] = contentAdql;break;
                    }
                    contentTable["key"] = joinIdDic[key];
                    json[key] = contentTable;
                }
                break;
            }
        }
        console.log(json);
        return json;
    };
    /***
     * @param allLinkRe: all table
     * @return: an array containing the names of the tables
     */
    TapService.prototype.removeViewTable = function (allLinkRe) {
        var site = this.url;
        var checkstatus = this.checkstatus;
        var schema_name = this.schema;
        var reTable;
        var position = [];
        var flag = 0;
        //By default, all are displayed.
        var checkvalue = 'SELECT DISTINCT T.table_name as table_name FROM tap_schema.tables as T WHERE T.schema_name = \'' + schema_name + '\' AND T.table_type = \'view\'';
        if (checkstatus == true) {
            checkvalue = 'SELECT DISTINCT TOP 100 T.table_name as table_name FROM tap_schema.tables as T WHERE T.schema_name = \'' + schema_name + '\' AND T.table_type = \'view\'';
        }
        reTable = $.ajax({
            url: "" + site,
            type: "GET",
            data: { query: "" + checkvalue, format: 'votable', lang: 'ADQL', request: 'doQuery' },
            async: false
        })
            .done(function (result) {
            return result;
        });
        var allTable = [];
        var content = reTable.responseText;
        var l = 0;
        $(content).find('RESOURCE[type="results"]').each(function () {
            $(this).find("STREAM").each(function () {
                l = $(this).context.textContent.length;
            });
        });
        if (l == 0) {
            return allLinkRe; //
        }
        else {
            allTable = VOTableTools.votable2Rows(reTable);
            var viewTable = [];
            var j = 0;
            for (var i = 0; i < allTable.length; i++) {
                if (allTable[i] != undefined && allTable[i].length != 0) {
                    viewTable[j] = allTable[i];
                    j++;
                }
            }
            for (var i = 0; i < viewTable.length; i++) {
                var a = viewTable[i];
                for (var j_1 = 0; j_1 < allLinkRe.length; j_1++) {
                    for (var h = 0; h < allLinkRe[j_1].length; h++) {
                        if (allLinkRe[j_1][h].indexOf(a) != -1) {
                            flag = 1;
                        }
                    }
                    if (flag == 1) {
                        position.push(j_1); //record the position of the "view" table
                        flag = 0;
                    }
                }
            }
            for (var i = 0; i < position.length - 1; i++) {
                for (var j_2 = 0; j_2 < position.length - 1; j_2++) {
                    if (position[j_2] < position[j_2 + 1]) {
                        var temp = position[j_2];
                        position[j_2] = position[j_2 + 1];
                        position[j_2 + 1] = temp;
                    }
                }
            }
            for (var i = 0; i < position.length; i++) {
                allLinkRe.splice(position[i], 1); //delete "view" table
            }
            return allLinkRe;
        }
    };
    return TapService;
}());
///////////////////////////////////////////////////////////// END TapService ///////////////////////////////////////////////////
