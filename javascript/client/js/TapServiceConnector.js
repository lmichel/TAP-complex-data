class TapServiceConnector {
      constructor(_serviceUrl, _schema, _shortname) {
        //super();
          let serviceUrl = _serviceUrl;
          let schema = _schema;
          let shortname = _shortname;
          let  adqlQuery = "";
          let rootTable= "";
          this.tapService = new TapService(_serviceUrl,_schema,_shortname,true)
          this.jsonSchema = {};
        
          // getteur and setteur for private parameters
          this.setServiceUrl = function(myServiceUrl) {
            serviceUrl = myServiceUrl;
          }
          this.getServiceUrl = function() {
            return serviceUrl;
          }
          this.setSchema = function(mySchema) {
            schema = mySchema;
          }
          this.getSchema = function() {
            return schema;
          }
          this.setShortname = function(myShortname) {
            shortname = myShortname;
          }
          this.getShortname = function() {
            return shortname;
          }

          this.setAdqlQuery = function(myAdqlQuery) {
            adqlQuery = myAdqlQuery;
          }
          this.getAdqlQuery = function() {
            return adqlQuery;
          }
          this.setRootTable = function(myRootTable) {
            rootTable = myRootTable;
          }
          this.getRootTable = function() {
            return rootTable;
          }
         

          
      }

    }

/**
 * @returns the votable objet: result of adql query
 */
TapServiceConnector.prototype.connect=function(){ 
    var votableQueryResult = this.tapService.Query(this.getAdqlQuery());
    return votableQueryResult;
    }

    /**
     * use this method to connect service
     */
TapServiceConnector.prototype.connectService=function() {
      this.connect();
    }

TapServiceConnector.prototype.setRootTable=function(shema,table){

    }

    /**
     * return the full json create by the method createJson()
     */
TapServiceConnector.prototype.loadJson=function() {  
       return this.tapService.createJson();
    }

    /**
     * 
     * @param {*} root  represent the root table
     * @param {*} json represent the main json create by the method createMainJson
     * @returns return the list of id of join table
     */
TapServiceConnector.prototype.joinAndId=function(root,json){
    var list = [];
    for(var key in json){
        if(key == root){
            for(var join in json[key].join_tables){
                list.push(json[key].join_tables[join].target);
                list.push(join);
            }
        }
    }
    return list;
    }
    /**
    * 
    * @param {*} listJoinAndId the list of id returned by TapServiceConnector.prototype.getListJoinAndId
    * @return   list of all id
    */

TapServiceConnector.prototype.getListeId=function(listJoinAndId){
    var listId = [];
    for(var i = 0;i<listJoinAndId.length;i=i+2){
        if(!json2Requete.isString(listJoinAndId[i])){
            var temp = listJoinAndId[i][0];
        }
        else{
            var temp = listJoinAndId[i];
        }
        if(listId.indexOf(temp)==-1){
            listId.push(temp);//record the key linked to root table, No repeating
        }
    }
    return listId;
    }

    /**
    * 
    * @param {*} rootName |the root table names of tabservice
    * @param {*} mainJsonData the main json generated by the  method createJson()
    * @returns return array containing all join table with correct id
    */
TapServiceConnector.prototype.getListJoinAndId=function(rootName,mainJsonData){
    var listJoinAndId=[];
    listJoinAndId = this.joinAndId(rootName,mainJsonData)
    return listJoinAndId;
    }

    /**
     * 
     * @param {*} baseTableName  the root table name 
     * @returns return all join table of the root table name
     */
TapServiceConnector.prototype.getJoinTables=function(baseTableName){
    var data = this.loadJson();
    var jsonread=new jsonRead(data);

    return jsonread.joinTable(baseTableName);
    }

    /**
     * 
     * @param {*} mainJsonData  the main json create by the method createMainJson of Tapservice
     * @returns return all the field of each join table of the mainJson
     */
TapServiceConnector.prototype.getCorrectFieldOfJoinTable=function(mainJsonData){
    var tableContentQueryField=[]
    Object.keys(mainJsonData).forEach(function(key) {
      tableContentQueryField.push(key);
    });
    return tableContentQueryField;
    }

    /**
     * 
     * @param {*} mainJsonData the main json create by the method createMainJson of Tapservice
     * @returns return all join request of each join table of the mainJson
     */
TapServiceConnector.prototype.getCorrectJoinQueryOfEachTableField=function(mainJsonData){
    var tableContentQuery=[];
    var JsonValue;
    //console.log(JSON.stringify(mainJsonData,undefined,2))
    Object.keys(mainJsonData).forEach(function(key) {
      JsonValue = mainJsonData[key];
    Object.keys(JsonValue).forEach(function(key) {
        var  queryValue ;
        if(key!="key"){
          queryValue = JsonValue[key];
          tableContentQuery.push(queryValue); 
        }  
    });
   });
    return tableContentQuery;
  }

    /**
     * 
     * @param {*} simbadService  your service : instance of TapService
     * @param {*} tableContentQueryField all the field of each join table of the mainJson get by calling method getCorrectFieldOfJoinTable()
     * @param {*} tableContentQuery all join request of each join table of the mainJson et by calling method getCorrectJoinQueryOfEachTableField()
     * @param {*} baseTableName  root table name
     */
TapServiceConnector.prototype.selectTableToJoin = function(simbadService,tableContentQueryField,tableContentQuery,baseTableName){
      var simbadService = new TapServiceConnector(this.getServiceUrl(),this.getSchema(),this.getShortname());
      $(document).ready(function(){
        $("select#selectToJoin").change(function(){
            var selector = $(this).children("option:selected").val();
            if(selector == baseTableName){
              var adql ="SELECT  TOP 100  * FROM "+simbadService.getSchema()+"."+baseTableName;
               adqlQuery = $("#txtAreaAdql").val(adql);
               simbadService.setAdqlQuery(adqlQuery.val());
               //var  QObject = simbadService.tapService.Query(textArea);
               $("#executeAdql").click(function(){
                      var textArea = $("#txtAreaAdql").val()
                      //alert( "txt "+textArea);
                      simbadService.setAdqlQuery(textArea)
                      var jsonData = simbadService.createVoTableResultJson(simbadService.connect(),baseTableName)
                      $("#votableJson").html(JSON.stringify(jsonData,undefined,2));
                      window.location.hash = "#votableJson"   
                })
            }

            for(var i=0;i<tableContentQueryField.length;i++){

              var a = simbadService.getJoinTables(tableContentQueryField[i]);
              var out;
             //////////////////////////// //////////////// different selector //////////////////////////

              if(selector == tableContentQueryField[i]){
                  //alert(tableContentQuery[i])
                  if(tableContentQuery[i]!=undefined){
                  }else{
                    var sql ="SELECT  TOP 10  * FROM "+simbadService.getSchema()+"."+tableContentQueryField[i];
                    tableContentQuery[i] =sql
                  }
                    simbadService.setAdqlQuery(tableContentQuery[i]);
                    //alert(simbadService.getAdqlQuery())
                    var data = simbadService.loadJson();
                    var listJoinAndId = simbadService.getListJoinAndId(tableContentQueryField[i],data);
                    var listId = simbadService.getListeId(listJoinAndId)
                    var textArea = $("#txtAreaAdql").val(tableContentQuery[i])
                    simbadService.setAdqlQuery($("#txtAreaAdql").val());
                    out= simbadService.tapService.createMainJson(simbadService.getAdqlQuery(),data,tableContentQueryField[i],listId,listJoinAndId);
                    var  QObject = simbadService.tapService.Query(textArea.val());
                    //var dataTable = VOTableTools.votable2Rows(QObject);
                    //mainData = tapS.createMainJson(tableContentQueryField[i],data,'basic',listId,listJoinAndId);
                      /* $("#loadJson").html(JSON.stringify(out,undefined,2));
                        window.location.hash = "#loadJson"
                        $("#votableJson").html(JSON.stringify(dataTable,undefined,2));
                        window.location.hash = "#votableJson"*/
                      
                        $("#selectDiv").html(simbadService.selectTableToJoin_html(a))
                        window.location.hash = "#selectDiv"
                        textArea = $("#txtAreaAdql").val(tableContentQuery[i])
                        $("#executeAdql").click(function(){
                          var textArea = $("#txtAreaAdql").val()
                          simbadService.setAdqlQuery(textArea)
                          out= simbadService.tapService.createMainJson(simbadService.getAdqlQuery(),data,tableContentQueryField[i],listId,listJoinAndId);;
                
                        // var  QObject = simbadService.tapService.Query(textArea);
                        // var dataTable = VOTableTools.votable2Rows(QObject) 
                          $("#loadJson").html(JSON.stringify(out,undefined,2));
                          window.location.hash = "#loadJson" 
                          var jsonData = simbadService.createVoTableResultJson(simbadService.connect(),tableContentQueryField[i])
                          $("#votableJson").html(JSON.stringify(jsonData,undefined,2));
                          window.location.hash = "#votableJson"
                          simbadService.joinTableByField(out,baseTableName)

                    })

                    break;

                       }
                    }
        
                });
 
            });

       }

/**
 * 
 * @param {*} tableContentJoinTable : Array containing array of all join table
 * @returns return html object with select option that containt all join table as option
 */
TapServiceConnector.prototype.selectTableToJoin_html = function(tableContentJoinTable){
        var out ='<div class="card" id ="">'+
        '<div class="card-body">'+
          '<div class="row">'+
              '<div class="col-lg-6">'+
                  ' <div class="form-group">'+
                  '<label for="selectToJoin">Select Table To Join &nbsp &nbsp &nbsp'+
                  '</label>'+
                  '<select class="form-control" id="selectToJoin">'+
                  '<option seleted>...</option>'
                      for(var i=0;i<tableContentJoinTable.length;i++){
                          
                          out +="<option id='"+i+"'>"+tableContentJoinTable[i]+"</option>"
                      }
                      out +='</select>'+
                          '</div>'+'</div>'+'</div>'+
                          '<hr class="btn-primary">'+
                          '<div> '+
                          '<textarea class="form-control" id="txtAreaAdql" value=""></textArea><br>'+
                          '</div>'+
                          '<button class="btn btn-success" id="executeAdql">Run Adql</button>'
                          '</div>'+'</div>'      
        return out;                                
    }


      /**
       * 
       * @param {*} mainJsonData the main json create by the method createMainJson of Tapservice
       * @param {*} baseTableName the root table name : String
       * @param {*} url           the base url : String
       * @param {*} schema        the schema of database : String
       * @param {*} shortname     the short name of database : String
       */
TapServiceConnector.prototype.joinTableByField=function(mainJsonData,baseTableName,url,schema,shortname){
    var data = this.loadJson();
    //var jsonread=new jsonRead(data);
    var tableContentQueryField=this.getJoinTables(baseTableName);
    tableContentQuery= this.getCorrectJoinQueryOfEachTableField(mainJsonData);
    var tableContentQueryField=this.getCorrectFieldOfJoinTable(mainJsonData);
  
    var data = this.loadJson();
    
      if(shortname == "Simbad"){
        schema = "public";
        url = "http://simbad.u-strasbg.fr/simbad/sim-tap/sync";
        baseTableName = "basic";
      }else if(shortname == "Gavo" ){
         schema = "rr";//alert(shortname)
         url = "http://dc.zah.uni-heidelberg.de/tap/sync";
         baseTableName ='resource';
      }else if(shortname == "CAOM"){
       // alert(shortname)
        schema = "dbo";
        url = "http://vao.stsci.edu/CAOMTAP/tapservice.aspx/sync";
        baseTableName ='CaomObservation'
      }else if(shortname=="Vizier"){
        schema = "metaviz";
        url = "http://tapvizier.u-strasbg.fr/TAPVizieR/tap/sync";
        baseTableName ='METAcat'
      }else if(shortname=="3XMM"){
        schema = "EPIC";
        url = "http://xcatdb.unistra.fr/3xmmdr8/tap/sync";
        baseTableName ='EPIC_IMAGE'
      }
      var simbadService = new TapServiceConnector(url,schema,shortname);
      this.selectTableToJoin(simbadService,tableContentQueryField,tableContentQuery,baseTableName);   
    }

    /**
     * 
     * @param {*} votableQueryResult : Object => the result of query is an object get by this.tapService.Query(this.getAdqlQuery());
     *                                this.tapService = instance of TapService
     *                                this.getAdqlQuery() return adql query : String
     */
 TapServiceConnector.prototype.createVoTableResultJson=function(votableQueryResult,tableName){
      var voTableData  = VOTableTools.votable2Rows(votableQueryResult);
      //var data =votable2data(votableQueryResult)
      var tableLength;
      var votableField;
      var contentText = votableQueryResult.responseText;
      if(this.getServiceUrl()=="http://simbad.u-strasbg.fr/simbad/sim-tap/sync" || this.getServiceUrl() == "http://dc.zah.uni-heidelberg.de/tap/sync"){
         votableField = VOTableTools.getField (votableQueryResult);
         tableLength = votableField.length;
    }else{
      
      votableField =VOTableTools.genererField(votableQueryResult,contentText);
    }
      
      var jsonData = { 
          data: {
                
            }
      }
      var k=0;
      
      var out1 =this.genererDataTable(votableField,voTableData,tableName);
      for(var i = 0; i<votableField.length;i++){ 
        for(var j=0;j<votableField.length;j++){
          if(i==j)
          jsonData.data[votableField[i]]=voTableData[j] ;
        }   
        ;    
    } 
      return out1;
  }

  /**
   * 
   * @param {*} Field  : Array containing all the field of choosing table in the database 
   * @param {*} dataTable : Array containing data of votable object get by calling the method votable2Row(votableObjet) of TabService 
   * @returns return html table with result of adql query
   */
TapServiceConnector.prototype.genererDataTable=function (Field,dataTable,tableName){ 

  var out1="<table class='table table-bordered'>"
  out1 +="<thead><tr role='row' style='text-align:center'>"+tableName;+"</thead>"//head
  //out +="<th/>";
  var nbCols = Field.length;
  for(var rowNb=0;rowNb<nbCols;rowNb++){
  out1 +="<th rowspan='1' class='th-sm'  colspan='1' style='text-align:center;vertical-align:bottom'>"+Field[rowNb]+"&nbsp&nbsp</th>";
  }
  out1 +="</tr></thead>";
  out1 +="<tbody>";
  var column =0;
  if(dataTable[dataTable.length-1]==0){
    dataTable.splice(dataTable.length-1,1);
  }
  for(var rowNb=0;rowNb<dataTable.length;rowNb+=nbCols){//table  content
    if ( rowNb%2 ) {
      out1+="<tr>";
    } else {
      out1+="<tr class = 'even'>";
    }
    for(var col=0;col<nbCols;col++){
      out1 +="<td id = '"+dataTable[rowNb + col]+"' >"+dataTable[rowNb + col]+"</td>";
    }
    out1 +="</tr>";
  }
  out1 +="</tbody>";
  out1 += "</table></div></td></tr>";
  
  return out1;
}
      
TapServiceConnector.prototype.mainJsonData=function (adql) {
  var data = this.loadJson();
  var QObject = this.connect();
  var listJoinAndId = this.getListJoinAndId('basic',data);
  var listId = this.getListeId(listJoinAndId);
  return simbadService.tapService.createMainJson(adql,data,'basic',listId,listJoinAndId);;
      
}



TapServiceConnector.prototype.genererZone3 =function(adql,s,root,n,listJoinAndId){
  var QObject = s.Query(adql);
  var dataTable = VOTableTools.votable2Rows(QObject);
  var contentText = QObject.responseText;
  var Field =VOTableTools.genererField(QObject,contentText);
  var nb = Field.length;
  if(nb==0){
      $(contentText).find('RESOURCE[type="results"]').each(function(){
            if($(this).find("INFO").attr("name")=="QUERY_STATUS"){
                out = $(this).context.textContent;
                return out;
            }
          
        })
    }
    else{
        out = genererTable(Field,dataTable,n.json,root,listJoinAndId);
    }
    return out;
    }

TapServiceConnector.prototype.genererTable =function (Field,dataTable,json,root,listJoinAndId){//include textarea
      var listJoin=[];
      var nb = Field.length;
      for(var key in json[root].join_tables){
          listJoin.push(key);
      }
      var out ;
      out = "<div id = 'ddata'><table class = 'table' id='example-table2' role = 'grid'>";
      out += "<h4>The amount of data is: </h4>"
      out +="<thead><tr role='row'>";//head
      out +="<th>JoinTable</th>";
      for(var j=0;j<nb;j++){
          out +="<th class='sorting_disabled' rowspan='1' colspan='1' style='text-align: auto;'>"+Field[j]+"</th>";
      }
      out +="</tr></thead>";
      var joinIdDic ={};
      for(var i=0;i<listJoinAndId.length;i=i+2){
          if(!json2Requete.isString(listJoinAndId[i])){
              joinIdDic[listJoinAndId[i+1]]=listJoinAndId[i][0];
          }else{
              joinIdDic[listJoinAndId[i+1]]=listJoinAndId[i];
          }
      }
      var jsonTable ={};
      for(var key in joinIdDic){
          for(var j=1;j<nb;j++){
              if(Field[j]==joinIdDic[key]){
                  var temp =j;//save the position of key
              }
          }
          jsonTable[key]=temp;
      }
      //console.log(listJoinAndId)
      //console.log(joinIdDic)
      //console.log(jsonTable)
      out +="<tbody>"
      var count =0;
      var number=0;
      for(var j=0;j<dataTable.length;j++){//table  content
          if(count==0){
              out +="<tr role='row'>";
              out +="<td><div class='btn-group' style='width :100px'>"+
              "<button type='button' class='btn btn-primary' >JOIN</button>"+
              "<button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >"+
                  "<span class='caret'></span>"+
                  "<span class='sr-only'></span>"+
              "</button>"+
              "<ul class='dropdown-menu' role='menu'>";
              for(var i=0;i<listJoin.length;i++){
                  var position = jsonTable[listJoin[i]];
                  out+="<li><a href='#' id='"+ dataTable[j+position] +"|"+ listJoin[i] + "'  name = 'boid'>"+listJoin[i]+" "+"</a></li>";
              }
              out +="</div></td>"
          }
        
              out +="<td style='text-align: auto;'>"+dataTable[j]+"</td>";
          
          
        
          count =count+1;
          if(count==nb){
              out +="</tr>";
              number++;
              count=0;
          }
      }
      out+="</tbody>"
      out += "</table></div>"
      var start = out.indexOf("is:")+3;
      out = out.slice(0,start)+" "+number +out.slice(start)
      return out;
  }


  
